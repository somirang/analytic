[{"/Users/haesol/Desktop/mediround-user-web-master/src/index.tsx":"1","/Users/haesol/Desktop/mediround-user-web-master/src/reportWebVitals.ts":"2","/Users/haesol/Desktop/mediround-user-web-master/src/configureStore.ts":"3","/Users/haesol/Desktop/mediround-user-web-master/src/App.tsx":"4","/Users/haesol/Desktop/mediround-user-web-master/src/routes.tsx":"5","/Users/haesol/Desktop/mediround-user-web-master/src/auth/auth.tsx":"6","/Users/haesol/Desktop/mediround-user-web-master/src/components/Sidebar/Sidebar.tsx":"7","/Users/haesol/Desktop/mediround-user-web-master/src/components/Navbar/Navbar.tsx":"8","/Users/haesol/Desktop/mediround-user-web-master/src/store/index.ts":"9","/Users/haesol/Desktop/mediround-user-web-master/src/aws/UserPool.ts":"10","/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/user.ts":"11","/Users/haesol/Desktop/mediround-user-web-master/src/pages/User.tsx":"12","/Users/haesol/Desktop/mediround-user-web-master/src/api/user.ts":"13","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/QuoteDetail.tsx":"14","/Users/haesol/Desktop/mediround-user-web-master/src/components/Dimmer/Dimmer.tsx":"15","/Users/haesol/Desktop/mediround-user-web-master/src/config.ts":"16","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/index.tsx":"17","/Users/haesol/Desktop/mediround-user-web-master/src/api/quote.ts":"18","/Users/haesol/Desktop/mediround-user-web-master/src/pages/SignIn.tsx":"19","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Main.tsx":"20","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Form.tsx":"21","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/My.tsx":"22","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Landing.tsx":"23","/Users/haesol/Desktop/mediround-user-web-master/src/pages/NotFound.tsx":"24","/Users/haesol/Desktop/mediround-user-web-master/src/pages/SignUp.tsx":"25","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Forgot.tsx":"26","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Request.tsx":"27","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/Button.tsx":"28","/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/index.ts":"29","/Users/haesol/Desktop/mediround-user-web-master/src/api/index.ts":"30","/Users/haesol/Desktop/mediround-user-web-master/src/utils/index.ts":"31","/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/quote.ts":"32","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/SignIn.tsx":"33","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Main.tsx":"34","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/DescriptionButton.tsx":"35","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/CategoryButton.tsx":"36","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Waiting.tsx":"37","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Done.tsx":"38","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/UnderlinedButton.tsx":"39","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/CheckBox.tsx":"40","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/PhotoInput.tsx":"41","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/InfoInput.tsx":"42","/Users/haesol/Desktop/mediround-user-web-master/src/components/PhotoPreview/PhotoPreview.tsx":"43","/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/hospital.ts":"44","/Users/haesol/Desktop/mediround-user-web-master/src/api/hospital.ts":"45","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Sent.tsx":"46","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Schedule.tsx":"47","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Preview.tsx":"48","/Users/haesol/Desktop/mediround-user-web-master/src/components/Modal/Modal.tsx":"49","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Reserve.tsx":"50","/Users/haesol/Desktop/mediround-user-web-master/src/components/Navbar/MyPageNavbar.tsx":"51","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Quotes.tsx":"52","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/WaitingCard.tsx":"53","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/RequestCard.tsx":"54","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/DoneCard.tsx":"55","/Users/haesol/Desktop/mediround-user-web-master/src/components/Status/Status.tsx":"56","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/ProcInput.tsx":"57","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/ScheduleQuoteCard.tsx":"58","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/SentQuoteCard.tsx":"59","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/QuoteCard.tsx":"60","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/TimeMultipleSelection.tsx":"61","/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/CalendarCarousel.tsx":"62","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/SimpleCard.tsx":"63","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/CommonQuoteCard.tsx":"64"},{"size":1427,"mtime":1623235365000,"results":"65","hashOfConfig":"66"},{"size":425,"mtime":1623235365000,"results":"67","hashOfConfig":"66"},{"size":490,"mtime":1623235365000,"results":"68","hashOfConfig":"66"},{"size":2403,"mtime":1623235365000,"results":"69","hashOfConfig":"66"},{"size":2536,"mtime":1623235365000,"results":"70","hashOfConfig":"66"},{"size":3469,"mtime":1623235365000,"results":"71","hashOfConfig":"66"},{"size":5621,"mtime":1623235365000,"results":"72","hashOfConfig":"66"},{"size":840,"mtime":1623235365000,"results":"73","hashOfConfig":"66"},{"size":452,"mtime":1623235365000,"results":"74","hashOfConfig":"66"},{"size":720,"mtime":1623235365000,"results":"75","hashOfConfig":"66"},{"size":362,"mtime":1623235365000,"results":"76","hashOfConfig":"66"},{"size":442,"mtime":1623235365000,"results":"77","hashOfConfig":"66"},{"size":751,"mtime":1623235365000,"results":"78","hashOfConfig":"66"},{"size":12420,"mtime":1623235365000,"results":"79","hashOfConfig":"66"},{"size":493,"mtime":1623235365000,"results":"80","hashOfConfig":"66"},{"size":800,"mtime":1623235365000,"results":"81","hashOfConfig":"66"},{"size":407,"mtime":1623235365000,"results":"82","hashOfConfig":"66"},{"size":2659,"mtime":1623235365000,"results":"83","hashOfConfig":"66"},{"size":3335,"mtime":1623235365000,"results":"84","hashOfConfig":"66"},{"size":165,"mtime":1623235365000,"results":"85","hashOfConfig":"66"},{"size":11874,"mtime":1623235365000,"results":"86","hashOfConfig":"66"},{"size":2452,"mtime":1623235365000,"results":"87","hashOfConfig":"66"},{"size":5344,"mtime":1623235365000,"results":"88","hashOfConfig":"66"},{"size":175,"mtime":1623235365000,"results":"89","hashOfConfig":"66"},{"size":7078,"mtime":1623235365000,"results":"90","hashOfConfig":"66"},{"size":4668,"mtime":1623235365000,"results":"91","hashOfConfig":"66"},{"size":2469,"mtime":1623235365000,"results":"92","hashOfConfig":"66"},{"size":982,"mtime":1623235365000,"results":"93","hashOfConfig":"66"},{"size":169,"mtime":1623235365000,"results":"94","hashOfConfig":"66"},{"size":184,"mtime":1623235365000,"results":"95","hashOfConfig":"66"},{"size":5831,"mtime":1623235365000,"results":"96","hashOfConfig":"66"},{"size":370,"mtime":1623235365000,"results":"97","hashOfConfig":"66"},{"size":1881,"mtime":1623235365000,"results":"98","hashOfConfig":"66"},{"size":4062,"mtime":1623235365000,"results":"99","hashOfConfig":"66"},{"size":1200,"mtime":1623235365000,"results":"100","hashOfConfig":"66"},{"size":973,"mtime":1623235365000,"results":"101","hashOfConfig":"66"},{"size":4301,"mtime":1623235365000,"results":"102","hashOfConfig":"66"},{"size":1906,"mtime":1623235365000,"results":"103","hashOfConfig":"66"},{"size":447,"mtime":1623235365000,"results":"104","hashOfConfig":"66"},{"size":395,"mtime":1623235365000,"results":"105","hashOfConfig":"66"},{"size":816,"mtime":1623235365000,"results":"106","hashOfConfig":"66"},{"size":2679,"mtime":1623235365000,"results":"107","hashOfConfig":"66"},{"size":793,"mtime":1623235365000,"results":"108","hashOfConfig":"66"},{"size":394,"mtime":1623235365000,"results":"109","hashOfConfig":"66"},{"size":423,"mtime":1623235365000,"results":"110","hashOfConfig":"66"},{"size":2217,"mtime":1623235365000,"results":"111","hashOfConfig":"66"},{"size":1646,"mtime":1623235365000,"results":"112","hashOfConfig":"66"},{"size":9213,"mtime":1623235365000,"results":"113","hashOfConfig":"66"},{"size":1748,"mtime":1623235365000,"results":"114","hashOfConfig":"66"},{"size":3623,"mtime":1623235365000,"results":"115","hashOfConfig":"66"},{"size":1435,"mtime":1623235365000,"results":"116","hashOfConfig":"66"},{"size":2149,"mtime":1623235365000,"results":"117","hashOfConfig":"66"},{"size":2712,"mtime":1623235365000,"results":"118","hashOfConfig":"66"},{"size":4153,"mtime":1623235365000,"results":"119","hashOfConfig":"66"},{"size":1653,"mtime":1623235365000,"results":"120","hashOfConfig":"66"},{"size":1223,"mtime":1623235365000,"results":"121","hashOfConfig":"66"},{"size":4966,"mtime":1623235365000,"results":"122","hashOfConfig":"66"},{"size":216,"mtime":1623235365000,"results":"123","hashOfConfig":"66"},{"size":204,"mtime":1623235365000,"results":"124","hashOfConfig":"66"},{"size":1728,"mtime":1623235365000,"results":"125","hashOfConfig":"66"},{"size":2028,"mtime":1623235365000,"results":"126","hashOfConfig":"66"},{"size":4115,"mtime":1623235365000,"results":"127","hashOfConfig":"66"},{"size":996,"mtime":1623235365000,"results":"128","hashOfConfig":"66"},{"size":4033,"mtime":1623235365000,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"sc0ktl",{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/haesol/Desktop/mediround-user-web-master/src/index.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/reportWebVitals.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/configureStore.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/App.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/routes.tsx",["268"],"import React from \"react\";\nimport { Redirect, Route, RouteComponentProps, Switch } from \"react-router-dom\";\nimport {\n  SignUpPage,\n  MainPage,\n  LandingPage,\n  NotFoundPage,\n  FormPage,\n  MyPage,\n  SignInPage,\n  ForgotPasswdPage,\n} from \"./pages/User\";\nimport {\n  HospitalSignInPage,\n  HospitalMyPage,\n  HospitalProfilePage,\n  HospitalSchedulePage,\n} from \"./pages/Hospital\";\nimport QuoteDetailWrapper from \"./pages/My/QuoteDetail\";\n\ninterface ProtectedRouteProps {\n  component: React.FC<RouteComponentProps>;\n  isAuthenticated: boolean;\n  exact?: boolean;\n  path: string;\n}\n\nconst ProtectedRoute = ({\n  component: Component,\n  isAuthenticated,\n  ...rest\n}: ProtectedRouteProps) => {\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={`/signin?next=${window.location.pathname}`} />\n        )\n      }\n    />\n  );\n};\n\ninterface RouteProps {\n  isAuthenticated: boolean;\n}\n\nconst HospitalRoutes = (props: RouteComponentProps) => {\n  return (\n    <Switch>\n      <Route exact path={props.match.path} component={HospitalMyPage} />\n      <Route\n        path={`${props.match.path}/signin`}\n        component={HospitalSignInPage}\n      />\n      <Route path={`${props.match.path}/my`} component={HospitalMyPage} />\n      <Route\n        path={`${props.match.path}/profile`}\n        component={HospitalProfilePage}\n      />\n      <Route\n        path={`${props.match.path}/schedule`}\n        component={HospitalSchedulePage}\n      />\n    </Switch>\n  );\n};\n\nconst Routes = (props: RouteProps) => {\n  return (\n    <Switch>\n      <Route exact path=\"/landing\" component={LandingPage} />\n      <Route exact path=\"/signup\" component={SignUpPage} />\n      <Route exact path=\"/signin\" component={SignInPage} />\n      <Route exact path=\"/forgotPasswd\" component={ForgotPasswdPage} />\n      <Route exact path=\"/form\" component={FormPage} />\n      <Route\n        exact\n        path=\"/\"\n        component={props.isAuthenticated ? MyPage : LandingPage}\n      />\n      <ProtectedRoute\n        path=\"/mypage\"\n        isAuthenticated={props.isAuthenticated}\n        component={MyPage}\n      />\n      {/* TODO: user authentication to corresponding quote */}\n      <ProtectedRoute\n        path=\"/quote/:quoteId\"\n        isAuthenticated={props.isAuthenticated}\n        component={QuoteDetailWrapper}\n      />\n      <Route path=\"/hospital\" component={HospitalRoutes} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","/Users/haesol/Desktop/mediround-user-web-master/src/auth/auth.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Sidebar/Sidebar.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Navbar/Navbar.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/store/index.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/aws/UserPool.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/user.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/User.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/api/user.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/QuoteDetail.tsx",["269"],"import React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport \"./QuoteDetail.scss\";\nimport hospital_profile_default from \"../../images/hospital_profile_default.svg\";\nimport downArrowBlackIcon from \"../../images/down-arrow-black-icon.svg\";\nimport downArrowIcon from \"../../images/down-arrow-icon.svg\";\nimport { getHospitalQuote } from \"../../api/quote\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport { getInterestedProcsFromQuote } from \"../../utils\";\nimport Button from \"../../components/Button/Button\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface ProcDetailProps {\n  operationTime: string;\n  anesthesiaType: string;\n  recoveryTime: string;\n  sutureRemovalTime: string;\n  warning: string;\n  afterCare: string;\n}\n\ninterface ProcProps extends ProcDetailProps {\n  name: string;\n  priceMin: number;\n  priceMax: number;\n  methodology: string;\n}\n\ninterface ProcPropsWithInd extends ProcProps {\n  nth: number;\n}\n\ninterface QuoteDetailHeaderProps {\n  name: string;\n  hospitalProfileImg?: string;\n  hospitalName: string;\n  hospitalAddr: string;\n  hospitalAbout: string;\n  interestedProcedures: string[];\n  isPreview?: boolean;\n}\n\ninterface Props extends QuoteDetailHeaderProps, RouteComponentProps {\n  qid: string;\n  hid: string;\n  recommendedProcs: ProcProps[];\n}\n\nconst RecommendedProcedureItem = (props: ProcPropsWithInd) => {\n  const [isArrowUp, setIsArrowUp] = useState(false);\n  return (\n    <div className=\"quote-detail-recommended-procedure-item\">\n      <div className=\"quote-detail-recommended-procedure-subtitle\">\n        <div className=\"quote-detail-recommended-procedure-subtitle-num\">\n          {props.nth}\n        </div>\n        <div className=\"quote-detail-recommended-procedure-subtitle-text\">\n          {props.name}\n        </div>\n      </div>\n      <div className=\"quote-detail-recommended-procedure-sub-item purple price\">\n        <div className=\"quote-detail-recommended-procedure-sub-item-header\">\n          <div className=\"quote-detail-recommended-procedure-sub-item-title\">\n            <FormattedMessage id=\"quote.surgeryCost\" />\n          </div>\n          <div className=\"quote-detail-recommended-procedure-sub-item-title-content\">{`$${props.priceMin.toLocaleString()} - $${props.priceMax.toLocaleString()}`}</div>\n        </div>\n        <div className=\"quote-detail-recommended-procedure-sub-item-help-text\">\n          <FormattedMessage id=\"quote.costMayChange\" />\n        </div>\n      </div>\n      <div className=\"quote-detail-recommended-procedure-sub-item\">\n        <div className=\"quote-detail-recommended-procedure-sub-item-header\">\n          <div className=\"quote-detail-recommended-procedure-sub-item-title\">\n            <FormattedMessage id=\"quote.expectationOfEffect\" />\n          </div>\n        </div>\n      </div>\n      <div className=\"quote-detail-recommended-procedure-sub-item\">\n        <div className=\"quote-detail-recommended-procedure-sub-item-header\">\n          <div className=\"quote-detail-recommended-procedure-sub-item-title\">\n            <FormattedMessage id=\"quote.operationPlan\" />\n          </div>\n        </div>\n        <div className=\"quote-detail-recommended-procedure-sub-item-body\">\n          {props.methodology}\n        </div>\n      </div>\n      <div className=\"quote-detail-recommended-procedure-sub-item\">\n        <div\n          className={`quote-detail-recommended-procedure-sub-item-header ${\n            isArrowUp ? \"detailed\" : \"\"\n          }`}\n        >\n          <div className=\"quote-detail-recommended-procedure-sub-item-title\">\n            <FormattedMessage id=\"quote.surgeryRelated\" />\n          </div>\n          <img\n            className={`quote-detail-recommended-procedure-related-arrow ${\n              isArrowUp ? \"rotated\" : \"\"\n            }`}\n            src={downArrowIcon}\n            alt=\"down-arrow\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setIsArrowUp(!isArrowUp);\n            }}\n          />\n        </div>\n        {isArrowUp && (\n          <div className=\"quote-detail-recommended-procedure-sub-item-body\">\n            <div className=\"quote-detail-recommended-procedure-sub-item-row\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.operationTime\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content\">\n                {props.operationTime}\n              </div>\n            </div>\n            <div className=\"quote-detail-recommended-procedure-sub-item-row\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.anesthesiaMethod\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content\">\n                {props.anesthesiaType}\n              </div>\n            </div>\n            <div className=\"quote-detail-recommended-procedure-sub-item-row\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.recoveryTime\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content\">\n                {props.recoveryTime}\n              </div>\n            </div>\n            <div className=\"quote-detail-recommended-procedure-sub-item-row\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.seamRemovalDuration\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content\">\n                {props.sutureRemovalTime}\n              </div>\n            </div>\n            <div className=\"quote-detail-recommended-procedure-sub-item-row paragraph\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.precautions\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content paragraph\">\n                {props.warning}\n              </div>\n            </div>\n            <div className=\"quote-detail-recommended-procedure-sub-item-row paragraph\">\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-title\">\n                <FormattedMessage id=\"quote.surgeryRelated.afterCare\" />\n              </div>\n              <div className=\"quote-detail-recommended-procedure-sub-item-row-content paragraph\">\n                {props.afterCare}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const QuoteDetailHeader = (props: QuoteDetailHeaderProps) => {\n  const [isMore, setIsMore] = useState(false);\n  return (\n    <div className=\"quote-detail-header-container\">\n      <div className=\"quote-detail-greetings\">Dear {props.name},</div>\n      <div className=\"quote-detail-hospital-header\">\n        <div className=\"quote-detail-hospital-profile-container\">\n          <img\n            className=\"quote-detail-hospital-profile-img\"\n            src={\n              props.hospitalProfileImg\n                ? props.hospitalProfileImg\n                : hospital_profile_default\n            }\n            alt=\"quote-detail-hospital-profile-img\"\n          />\n        </div>\n        <div className=\"quote-detail-hospital-basic-info-container\">\n          <div className=\"quote-detail-hospital-name\">{props.hospitalName}</div>\n          <div className=\"quote-detail-hospital-addr\">{props.hospitalAddr}</div>\n        </div>\n      </div>\n      <div className=\"quote-detail-about-hospital quote-detail-info-item\">\n        <div className=\"quote-detail-about-hospital-title quote-detail-info-subtitle\">\n          <FormattedMessage id=\"quote.aboutHospital\" />\n        </div>\n        <div\n          className={`quote-detail-about-hospital-content ${\n            isMore ? \"see-more\" : \"\"\n          }`}\n        >\n          {props.hospitalAbout}\n        </div>\n        <div\n          className={`quote-detail-about-hospital-see-more ${\n            isMore ? \"see-less\" : \"\"\n          }`}\n          onClick={() => setIsMore(!isMore)}\n        >\n          <FormattedMessage\n            id={isMore ? \"form.case1.seeLess\" : \"form.case1.seeMore\"}\n          />\n          <img\n            className={`quote-detail-about-hospital-see-more-arrow-icon ${\n              isMore ? \"rotated\" : \"\"\n            }`}\n            src={downArrowBlackIcon}\n            alt=\"down-arrow\"\n          />\n        </div>\n      </div>\n      <div className=\"quote-detail-interested-procedure quote-detail-info-item\">\n        <div className=\"quote-detail-interested-procedure-title quote-detail-info-subtitle\">\n          <FormattedMessage id=\"quote.interestedProcedure\" />\n        </div>\n        <div className=\"quote-detail-interested-procedure-text\">\n          {props.interestedProcedures.join(\", \")}\n        </div>\n        <div\n          className={`quote-detail-interested-procedure-images ${\n            props.isPreview ? \"small-preview\" : \"\"\n          }`}\n        >\n          {/* TODO: replace with images */}\n          {[...new Array(5).keys()].map((i) => (\n            <div\n              className={`quote-detail-interested-procedure-img-placeholder ${\n                props.isPreview ? \"small-preview\" : \"\"\n              }`}\n              key={i}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst QuoteDetail = withRouter((props: Props) => {\n  // TODO: fetch quote with corresponding quoteId\n  return (\n    <div className=\"quote-detail-container\">\n      <QuoteDetailHeader {...props} />\n      <div className=\"quote-detail-recommended-procedures-container\">\n        <div className=\"quote-detail-recommended-procedures-title\">\n          <FormattedMessage id=\"quote.procedureRecommendation\" />\n        </div>\n        {props.recommendedProcs.map((proc, ind) => {\n          const indProc = { ...proc, nth: ind + 1 };\n          return <RecommendedProcedureItem key={ind} {...indProc} />;\n        })}\n      </div>\n      <div className=\"quote-detail-main-button-container\">\n        <div className=\"quote-detail-main-button-wrapper\">\n          <Button\n            text=\"Free consultation\"\n            textId=\"button.consultation\"\n            theme=\"primary\"\n            shape=\"square\"\n            style={{ fontSize: \"14px\" }}\n            onClick={() =>\n              props.history.push(`/mypage/reserve/${props.hid}/${props.qid}`)\n            }\n          />\n        </div>\n        <div className=\"quote-detail-main-button-wrapper\">\n          <Button\n            text=\"See quote list\"\n            textId=\"button.seeQuoteList\"\n            theme=\"white\"\n            shape=\"square\"\n            style={{ fontSize: \"14px\" }}\n            onClick={() => props.history.push(\"/mypage/quotes\")}\n          />\n        </div>\n      </div>\n    </div>\n  );\n});\n\nconst QuoteDetailWrapper = (props: RouteComponentProps<any>) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [detailedQuote, setDetailedQuote] = useState<QuoteDataProps>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quoteData = await getHospitalQuote({\n        hid: props.match.params.hid,\n        qid: props.match.params.qid,\n      });\n      return quoteData.result;\n    };\n    fetchRequestQuotes()\n      .then((quote: QuoteDataProps) => {\n        console.log(\"AAA\");\n        console.log(\"quote\", quote);\n        setDetailedQuote(quote);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.log(\"BBB\");\n        console.error(\"QuoteDetail\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return isLoading ? (\n    <Loading />\n  ) : (\n    <QuoteDetail\n      qid={props.match.params.qid}\n      hid={props.match.params.hid}\n      name={detailedQuote?.userInfo.name!}\n      hospitalName={detailedQuote?.hospitalInfo.name!}\n      hospitalAddr={detailedQuote?.hospitalInfo.addr!}\n      hospitalAbout={detailedQuote?.hospitalInfo.about!}\n      interestedProcedures={getInterestedProcsFromQuote(\n        detailedQuote?.quoteInfo.quote!,\n      )}\n      recommendedProcs={detailedQuote?.suggestedSurgeries}\n    />\n  );\n};\n\nexport default QuoteDetailWrapper;\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Dimmer/Dimmer.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/config.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/index.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/api/quote.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/SignIn.tsx",["270"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router\";\nimport { useAuthContext } from \"../auth/auth\";\nimport Button from \"../components/Button/Button\";\nimport UnderlinedButton from \"../components/Button/UnderlinedButton\";\nimport InfoInput from \"../components/Input/InfoInput\";\nimport { RootState } from \"../store\";\nimport { parseQuery, phoneLocaleList } from \"../utils\";\nimport \"./SignIn.scss\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst SignIn = (props: RouteComponentProps) => {\n  const auth = useAuthContext();\n  const location = useLocation();\n  const [phoneLocale, setPhoneLocale] = useState(phoneLocaleList[0].value);\n  const [phoneDigit, setPhoneDigit] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [signInLoading, setSignInLoading] = useState(false);\n  const user = useSelector((state: RootState) => state.user.current);\n  const history = useHistory();\n\n  useEffect(() => {\n    const nextLoc = parseQuery(location.search)[\"next\"];\n    if (user !== {} && nextLoc) {\n      history.push(nextLoc);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Determines phone number i.e. username\n    const fullPhone = phoneLocale + phoneDigit;\n    setPhone(fullPhone);\n  }, [phoneLocale, phoneDigit]);\n\n  const signInHandler = () => {\n    setSignInLoading(true);\n    auth\n      ?.authenticate(phone, password)\n      .then(() => {\n        const nextLoc = parseQuery(location.search)[\"next\"];\n        if (nextLoc) {\n          props.history.push(nextLoc);\n        } else {\n          props.history.push(\"/mypage\");\n        }\n      })\n      .catch((err) => {\n        setSignInLoading(false);\n        console.error(err);\n      });\n  };\n\n  return (\n    <div className=\"signin-page-container\">\n      <div className=\"signin-page-title\">\n        <FormattedMessage id=\"logIn.msg\" />\n      </div>\n      <InfoInput\n        title=\"Phone number\"\n        titleId=\"logIn.phone\"\n        type=\"tel\"\n        value={phoneDigit}\n        onChange={(e) => setPhoneDigit(e.target.value)}\n        optionVals={phoneLocaleList.map((obj) => obj.value)}\n        optionKeys={phoneLocaleList.map((obj) => obj.icon + \" \" + obj.value)}\n        onSelectChange={(e) => setPhoneLocale(e.target.value)}\n      />\n      <InfoInput\n        title=\"Password\"\n        titleId=\"logIn.Password\"\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <div className=\"signin-forgot-passwd-text\">\n        <UnderlinedButton\n          text=\"Forgot password?\"\n          textId=\"logIn.forgotYourPassword\"\n          onClick={() => props.history.push(\"/forgotPasswd\")}\n        />\n      </div>\n      <Button\n        text=\"Sign In\"\n        textId=\"button.signIn\"\n        theme=\"primary\"\n        shape=\"round\"\n        onClick={signInHandler}\n        isLoading={signInLoading}\n      />\n      <div className=\"signin-signup-text\">\n        <div className=\"signin-signup-desc\">\n          <FormattedMessage id=\"logIn.notMember\" />\n        </div>\n        <UnderlinedButton\n          text=\"Sign up\"\n          textId=\"logIn.signUp\"\n          onClick={() => props.history.push(\"/signup\")}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","/Users/haesol/Desktop/mediround-user-web-master/src/pages/Main.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Form.tsx",["271","272"],"import React, { useCallback, useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport Button from \"../components/Button/Button\";\nimport CategoryButton from \"../components/Button/CategoryButton\";\nimport DescriptionButton from \"../components/Button/DescriptionButton\";\nimport PhotoInput from \"../components/Input/PhotoInput\";\nimport PhotoPreview from \"../components/PhotoPreview/PhotoPreview\";\nimport { setQuote } from \"../store/reducers/quote\";\nimport { dummyData, isUserSignedIn } from \"../utils\";\nimport { SignUpForm } from \"../pages/SignUp\";\n\nimport \"./Form.scss\";\nimport Status from \"../components/Status/Status\";\nimport { postQuote } from \"../api/quote\";\nimport { RootState } from \"../store\";\nimport { UserProps } from \"../auth/auth\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\n\nimport eyes from \"../images/eyes.png\";\nimport nose from \"../images/nose.png\";\nimport facial_contouring from \"../images/facial_contouring.png\";\nimport breast from \"../images/breast.png\";\nimport liposuction from \"../images/liposuction.png\";\nimport fat_grafting from \"../images/fat_grafting.png\";\nimport skin from \"../images/skin.png\";\nimport petit from \"../images/petit.png\";\nimport mouth from \"../images/mouth.png\";\nimport tooth_eyesight from \"../images/tooth_eyesight.png\";\n\ninterface SurgicalOption {\n  name: string;\n  id: string;\n  textId?: string;\n  subCategories?: SurgicalOption[];\n  done?: boolean;\n}\n\ninterface Selection {\n  categoryId: string;\n  subCategoryIds?: string[];\n}\n\ninterface Props extends RouteComponentProps {}\n\nconst Form = (props: Props) => {\n  // TODO: fetch rootOptions from DB - replace dummyData\n  const [rootOptions, setRootOptions] =\n    useState<SurgicalOption[] | undefined>(dummyData);\n  const [formList, setFormList] =\n    useState<SurgicalOption[] | undefined>(dummyData);\n  const [step, setStep] = useState(0); // 0 - category, 1 - procedure, 2 - photo, 3 - comment, 4 - done\n  const [subStep, setSubStep] = useState(0);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [result, setResult] = useState<Selection[]>([]);\n  const [thumbnails, setThumbnails] = useState<string[]>([]);\n  const [headerMsgId, setHeaderMsgId] = useState(\"\");\n  const [headerValues, setHeaderValues] = useState({});\n  const [comment, setComment] = useState(\"\");\n  const [isSubmitReady, setIsSubmitReady] = useState(false);\n  const [isSubmitInProgress, setIsSubmitInProgress] = useState(false);\n  const dispatch = useDispatch();\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n  const intl = useIntl();\n\n  const imagesMap: { [key: string]: string } = {\n    eyes,\n    nose,\n    facial_contouring,\n    breast,\n    liposuction,\n    fat_grafting,\n    skin,\n    petit,\n    mouth,\n    tooth_eyesight,\n  };\n\n  useEffect(() => {\n    let msgId = \"\";\n    let values = {};\n    switch (step) {\n      case 0:\n        msgId = \"form.case0.msg\";\n        break;\n      case 1:\n        const categoryTextId = rootOptions?.find(\n          (category) => category.id === result[subStep].categoryId,\n        )?.textId;\n        const categoryName = intl.formatMessage({ id: categoryTextId });\n        msgId = \"form.case1.msg\";\n        values = { categoryName };\n        break;\n      case 2:\n        const categoryTextIds = result.map(\n          ({ categoryId }) =>\n            rootOptions?.find((category) => category.id === categoryId)?.textId,\n        );\n        const categoryNames = categoryTextIds\n          .map((id) => intl.formatMessage({ id }))\n          .join(\", \");\n        msgId = \"form.case2.msg\";\n        values = { categoryNames };\n        break;\n      case 3:\n        msgId = \"form.case3.msg\";\n        break;\n      case 4:\n        msgId = \"form.case4.msg\";\n        break;\n      case 5:\n        msgId = \"form.case5.msg\";\n        break;\n    }\n    setHeaderMsgId(msgId);\n    setHeaderValues(values);\n  }, [step, rootOptions, result, subStep]);\n\n  const fetchSelectedFormList = useCallback(\n    (subStep) => {\n      const currCategory = result[subStep];\n      const currFormList = rootOptions?.find(\n        (option) => option.id === currCategory.categoryId,\n      );\n      setSelectedIds(currCategory?.subCategoryIds || []);\n      setFormList(currFormList?.subCategories);\n    },\n    [result, rootOptions],\n  );\n\n  const handleSubmit = useCallback(async () => {\n    setIsSubmitInProgress(true);\n    const body = {\n      sub: user.sub!,\n      quote: result,\n      comment,\n      timestamp: new Date().getTime(),\n    };\n    await postQuote(body);\n    setIsSubmitInProgress(false);\n  }, [comment, result, user]);\n\n  const goPrev = useCallback(() => {\n    if (step === 1) {\n      if (subStep > 0) {\n        fetchSelectedFormList(subStep - 1);\n        setSubStep((s) => s - 1);\n      } else {\n        // TODO: show warning modal - \"data will be gone\"\n        setFormList(rootOptions);\n        setSelectedIds([]);\n        setResult([]);\n        setStep((s) => s - 1);\n      }\n    } else if (step === 2) {\n      fetchSelectedFormList(subStep);\n      setStep((s) => s - 1);\n    } else {\n      setStep((s) => s - 1);\n    }\n  }, [step, subStep, rootOptions, fetchSelectedFormList]);\n\n  const goNext = useCallback(async () => {\n    if (step === 0) {\n      const categories = formList\n        ?.filter((category) => selectedIds.includes(category.id))\n        .map((item) => item.subCategories);\n      const tempResult = selectedIds.map((id) => {\n        return { categoryId: id };\n      });\n      setResult(tempResult);\n      setFormList(categories![0]);\n      setSelectedIds([]);\n      setStep((s) => s + 1);\n    } else if (step === 1) {\n      const currCategory = result[subStep];\n      const newCategory = { ...currCategory, subCategoryIds: selectedIds };\n      const newResult = [...result];\n      newResult[subStep] = newCategory;\n      setResult(newResult);\n      if (subStep < result.length - 1) {\n        fetchSelectedFormList(subStep + 1);\n        setSubStep((s) => s + 1);\n      } else {\n        setStep((s) => s + 1);\n      }\n    } else if (step === 2) {\n      setStep((s) => s + 1);\n    } else if (step === 3) {\n      if (isUserSignedIn(user)) {\n        await handleSubmit();\n        setStep((s) => s + 2);\n      } else {\n        setStep((s) => s + 1);\n      }\n    } else if (step === 4) {\n      setStep((s) => s + 1);\n      dispatch(setQuote(result));\n\n      await handleSubmit();\n    } else if (step === 5) {\n      props.history.push(\"/mypage\");\n    } else {\n      setStep((s) => s + 1);\n    }\n  }, [\n    step,\n    subStep,\n    result,\n    selectedIds,\n    formList,\n    fetchSelectedFormList,\n    dispatch,\n    props.history,\n    user,\n    handleSubmit,\n  ]);\n\n  const onSelect = (viewType: string, id: string) => () => {\n    setSelectedIds((ids) => {\n      if (ids.includes(id)) {\n        return ids.filter((iid) => iid !== id);\n      } else {\n        if (viewType === \"sub\") {\n          return [id];\n        } else if (viewType === \"main\" && ids.length < 3) {\n          return ids.concat(id);\n        } else {\n          return ids;\n        }\n      }\n    });\n  };\n\n  const photoUploadHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      const fileNum = Object.keys(event.target.files).length;\n      const urlsToUpload: string[] = [];\n      const filesToUpload = [];\n\n      Object.entries(event.target.files).forEach(([_, file]) => {\n        let reader = new FileReader();\n        // let file = event.target.files![fileIndex];\n        // TODO : 취소하고 창 닫았을 때 에러처리\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          const url = reader.result;\n          if (url) {\n            urlsToUpload.push(url.toString());\n            filesToUpload.push(file);\n            if (urlsToUpload.length === fileNum) {\n              setThumbnails([...thumbnails, ...urlsToUpload]);\n              // setImageAttachments([...imageAttachments, ...filesToUpload]);\n            }\n          } else {\n            throw new Error(\"Error: occured while reading file\");\n          }\n        };\n      });\n    }\n  };\n\n  const photoDeleteHandler = (photoInd: number) => {\n    const newThumbnails = thumbnails.slice();\n    newThumbnails.splice(photoInd, 1);\n    setThumbnails(newThumbnails);\n  };\n\n  return (\n    <div className=\"form-page-container\">\n      <div className=\"form-header-container\">\n        <Status\n          step={step}\n          subStep={subStep}\n          maxSubStep={result.length}\n          isSignedIn={isUserSignedIn(user)}\n        />\n        {/* TODO: category preview */}\n        {headerMsgId && (\n          <div className=\"form-header-msg\">\n            <FormattedMessage id={headerMsgId} values={headerValues} />\n          </div>\n        )}\n      </div>\n      <div className={`form-body-container ${step === 0 ? \"grid-view\" : \"\"}`}>\n        {step < 2 ? (\n          formList?.map((data: SurgicalOption) =>\n            step === 0 ? (\n              <CategoryButton\n                text={data.name}\n                textId={data.textId}\n                key={data.id}\n                selectedIds={selectedIds}\n                id={data.id}\n                onClick={onSelect(\"main\", data.id)}\n                image={imagesMap[data.id]}\n              />\n            ) : (\n              <DescriptionButton\n                text={data.name}\n                textId={data.textId}\n                key={data.id}\n                selectedIds={selectedIds}\n                id={data.id}\n                onClick={onSelect(\"sub\", data.id)}\n              />\n            ),\n          )\n        ) : step === 2 ? (\n          <div className=\"form-thumbnails-container\">\n            {thumbnails.map((thumbnail, ind) => (\n              <PhotoPreview\n                key={ind}\n                src={thumbnail}\n                photoInd={ind}\n                deleteNthPhoto={photoDeleteHandler}\n              />\n            ))}\n            <PhotoInput onPhotoUpload={photoUploadHandler} />\n          </div>\n        ) : step === 3 ? (\n          <div className=\"form-comment-container\">\n            <FormattedMessage id=\"placeholder.leaveComment\">\n              {(message: string) => (\n                <textarea\n                  className=\"form-comment-textarea\"\n                  placeholder={message}\n                  value={comment}\n                  onChange={(e) => setComment(e.target.value)}\n                />\n              )}\n            </FormattedMessage>\n          </div>\n        ) : step === 4 ? (\n          <div className=\"signup-page-container no-padding\">\n            <SignUpForm setSubmitReady={setIsSubmitReady} />\n          </div>\n        ) : (\n          <div className=\"form-complete-container\">\n            <FormattedMessage id=\"form.case5.text\" />\n          </div>\n        )}\n      </div>\n      <div className=\"form-footer-button-container\">\n        {step > 0 && step < 5 && (\n          <Button\n            text=\"Prev\"\n            textId=\"button.previous\"\n            theme=\"gray\"\n            shape=\"round\"\n            onClick={goPrev}\n          />\n        )}\n        {step > 0 && step < 5 && <div className=\"form-footer-gap\" />}\n        <Button\n          text={\n            (isUserSignedIn(user) && step === 3) || step === 4\n              ? \"Submit\"\n              : step === 5\n              ? \"Go to My Page\"\n              : \"Next\"\n          }\n          textId={\n            (isUserSignedIn(user) && step === 3) || step === 4\n              ? \"button.submit\"\n              : step === 5\n              ? \"button.goToMyPage\"\n              : \"button.next\"\n          }\n          theme=\"primary\"\n          shape=\"round\"\n          onClick={goNext}\n          isDisabled={\n            selectedIds.length === 0 || (step === 4 && !isSubmitReady)\n          }\n          isLoading={isSubmitInProgress}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/My.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Landing.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/NotFound.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/SignUp.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Forgot.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Request.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/Button.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/index.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/api/index.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/utils/index.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/quote.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/SignIn.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Main.tsx",["273","274","275"],"import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, RouteComponentProps, Switch, withRouter } from \"react-router\";\nimport { getHospital } from \"../../api/hospital\";\nimport { setHospital } from \"../../store/reducers/hospital\";\nimport Preview from \"./Containers/Preview\";\nimport Request from \"./Containers/Request\";\nimport Schedule from \"./Containers/Schedule\";\nimport Sent from \"./Containers/Sent\";\nimport \"./Main.scss\";\n\ninterface ThreeTabNavbarProps {\n  tabs: any[];\n  viewType: string;\n  selectedTab: string;\n  setSelectedTab: (tabVal: string) => void;\n}\n\nconst ThreeTabNavbar = (props: ThreeTabNavbarProps) => {\n  return (\n    <div className=\"main-page-main-navbar-container\">\n      {props.tabs &&\n        props.tabs.map((tab, ind) => (\n          <div className=\"main-page-main-navbar-item-wrapper\" key={ind}>\n            <div\n              className={`main-page-main-navbar-item ${\n                props.selectedTab === tab.value ? \"selected\" : \"\"\n              }`}\n              key={ind}\n              onClick={() => props.setSelectedTab(tab.value)}\n            >\n              {tab.name}\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\ninterface MainProps extends RouteComponentProps {\n  viewType: string;\n}\n\nconst Main = (props: MainProps) => {\n  const [selectedTab, setSelectedTab] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useDispatch();\n\n  const tabs: { [key: string]: any[] } = {\n    my: [\n      { name: \"Quote Requests\", value: \"request\" },\n      { name: \"Sent Quotes\", value: \"sent\" },\n      { name: \"Scheduled Consultations\", value: \"schedule\" },\n    ],\n    profile: [\n      { name: \"Account\", value: \"account\" },\n      { name: \"Hospital Info.\", value: \"info\" },\n      { name: \"People & Staffs\", value: \"people\" },\n    ],\n  };\n\n  useEffect(() => {\n    let location = props.location.pathname.slice(1);\n    location =\n      location.charAt(location.length - 1) === \"/\"\n        ? location.slice(0, -1)\n        : location;\n    const splitted = location.split(\"/\");\n    if (splitted.length >= 3) {\n      setSelectedTab(splitted[2]);\n    } else if (tabs[props.viewType]) {\n      setSelectedTab(tabs[props.viewType][0].value);\n    }\n  }, [props.location]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const initHospital = async () => {\n      // TODO: get hospital ID\n      const hospitalData = await getHospital({ hid: \"h1\" });\n      const hospital = hospitalData.result;\n      dispatch(setHospital(hospital));\n    };\n    initHospital()\n      .then(() => {\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Main\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const selectTabHandler = (tabVal: string) => {\n    setSelectedTab(tabVal);\n    props.history.push(`/hospital/${props.viewType}/${tabVal}`);\n  };\n\n  return (\n    <div className=\"main-page-container\">\n      <div className=\"main-page-sidebar-container\">\n        <FormattedMessage id=\"hello\" />\n      </div>\n      <div className=\"main-page-main-container\">\n        {tabs[props.viewType] && (\n          <ThreeTabNavbar\n            tabs={tabs[props.viewType]}\n            viewType={props.viewType}\n            selectedTab={selectedTab}\n            setSelectedTab={selectTabHandler}\n          />\n        )}\n        <div className=\"main-page-main-content-container\">\n          <Switch>\n            <Route exact path=\"/hospital\" component={Request} />\n            <Route exact path=\"/hospital/my\" component={Request} />\n            <Route exact path=\"/hospital/my/request\" component={Request} />\n            <Route\n              exact\n              path=\"/hospital/my/request/:quoteId\"\n              component={Preview}\n            />\n            <Route exact path=\"/hospital/my/sent\" component={Sent} />\n            <Route exact path=\"/hospital/my/schedule\" component={Schedule} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withRouter(Main);\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/DescriptionButton.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/CategoryButton.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Waiting.tsx",["276"],"import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { fetchUserQuotes, rejectQuote } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport WaitingCard from \"../../components/Card/WaitingCard\";\nimport Modal from \"../../components/Modal/Modal\";\nimport { RootState } from \"../../store\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Waiting.scss\";\n\nconst Waiting = (props: RouteComponentProps) => {\n  const [showModal, setShowModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [matchedQuotes, setMatchedQuotes] = useState([]);\n  const [targetHid, setTargetHid] = useState(\"\");\n  const [targetQid, setTargetQid] = useState(\"\");\n  const [isRejecting, setIsRejecting] = useState(false);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  const fetchMatchedQuotes = async () => {\n    // TODO: get hospital Id\n    const quotesData = await fetchUserQuotes({ sub: user.sub! });\n    return quotesData.result.filter(\n      (quote: QuoteDataProps) => quote.status === MATCHED,\n    );\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMatchedQuotes()\n      .then((quotes) => {\n        setMatchedQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const onCancelHandler = (hid: string, qid: string) => {\n    setTargetHid(hid);\n    setTargetQid(qid);\n    setShowModal(true);\n  };\n\n  const rescheduleHandler = (hid: string, qid: string) => {\n    props.history.push(`/mypage/reserve/${hid}/${qid}`);\n  };\n\n  const rejectQuoteHandler = async (hid: string, qid: string) => {\n    setIsRejecting(true);\n    const isSuccess = await rejectQuote({ hid, qid });\n    if (isSuccess) {\n      setIsRejecting(false);\n      setShowModal(false);\n      setIsLoading(true);\n      fetchMatchedQuotes()\n        .then((quotes) => {\n          setMatchedQuotes(quotes);\n          setIsLoading(false);\n        })\n        .catch((e) => {\n          console.error(\"Quotes\", e);\n          setIsLoading(false);\n        });\n    } else {\n      setIsRejecting(false);\n      // TODO: show error modal\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"waiting-container\">\n          {matchedQuotes.length === 0 ? (\n            <FormattedMessage id=\"waiting.youHaveNot\" />\n          ) : (\n            matchedQuotes.map((quote: QuoteDataProps, i) => (\n              <WaitingCard\n                key={i}\n                name={quote.hospitalInfo.name!}\n                hid={quote.hospitalInfo.id!}\n                qid={quote.quoteInfo.id}\n                date={getCstFullDatetimeString(quote.consultTime!)}\n                onCancelHandler={onCancelHandler}\n                videoLink={quote.meetLinks![0]}\n              />\n            ))\n          )}\n          {showModal && (\n            <Modal\n              openController={setShowModal}\n              header=\"Are you sure you want to cancel?\"\n              headerId=\"cancel.msg\"\n              body=\"We might have another schedule that fit yours if you want to reschedule.\"\n              bodyId=\"cancel.text\"\n              closableByClickOutside={true}\n              leftButtonProps={{\n                text: \"Reschedule\",\n                textId: \"button.reschedule\",\n                theme: \"primary\",\n                shape: \"square\",\n                style: { fontSize: \"12px\", fontWeight: \"700\", height: \"40px\" },\n                onClick: () => rescheduleHandler(targetHid, targetQid),\n              }}\n              rightButtonProps={{\n                text: \"Yes, cancel\",\n                textId: \"button.yesCancel\",\n                theme: \"white\",\n                shape: \"square\",\n                style: { fontSize: \"12px\", fontWeight: \"700\", height: \"40px\" },\n                isLoading: isRejecting,\n                onClick: () => rejectQuoteHandler(targetHid, targetQid),\n              }}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Waiting;\n","/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Done.tsx",["277"],"import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport DoneCard from \"../../components/Card/DoneCard\";\nimport { RootState } from \"../../store\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Done.scss\";\n\nconst Done = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [doneQuotes, setDoneQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchMatchedQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === MATCHED,\n      );\n    };\n    fetchMatchedQuotes()\n      .then((quotes) => {\n        // TODO: filter done quotes\n        setDoneQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Done\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"done-container\">\n          {doneQuotes.length === 0 ? (\n            <FormattedMessage id=\"done.youHaveNot\" />\n          ) : (\n            doneQuotes.map((quote: QuoteDataProps, i) => (\n              <DoneCard\n                key={i}\n                hid={quote.hospitalInfo.id!}\n                qid={quote.quoteInfo.id}\n                name={quote.hospitalInfo.name!}\n                date={getCstFullDatetimeString(quote.consultTime!)}\n              />\n            ))\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Done;\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/UnderlinedButton.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/CheckBox.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/PhotoInput.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/InfoInput.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/PhotoPreview/PhotoPreview.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/store/reducers/hospital.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/api/hospital.ts",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Sent.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Schedule.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Preview.tsx",["278"],"import React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { getHospitalQuote, respondQuote } from \"../../../api/quote\";\nimport Button from \"../../../components/Button/Button\";\nimport {\n  RequestBody,\n  RequestHeader,\n} from \"../../../components/Card/RequestCard\";\nimport InfoInput from \"../../../components/Input/InfoInput\";\nimport ProcInput from \"../../../components/Input/ProcInput\";\nimport purple_go_back_arrow_icon from \"../../../images/purple-go-back-arrow-icon.svg\";\nimport { QuoteDetailHeader } from \"../../My/QuoteDetail\";\nimport { EmptyDesc, Loading, QuoteDataProps } from \"./Request\";\nimport \"./Preview.scss\";\nimport { getInterestedProcsFromQuote, getKstDatetime } from \"../../../utils\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../../store\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport interface Procedure {\n  name: string;\n  priceMin?: string;\n  priceMax?: string;\n  methodology?: string;\n  operationTime?: string;\n  anesthesiaType?: string;\n  recoveryTime?: string;\n  sutureRemovalTime?: string;\n  warning?: string;\n  afterCare?: string;\n}\n\nexport interface Hospital {\n  id?: string;\n  name?: string;\n  addr?: string;\n  about?: string;\n  procs?: string[];\n}\n\nconst initProc: Procedure = { name: \"\" };\n\nconst Preview = (props: RouteComponentProps<any>) => {\n  const [recommendedProcs, setRecommendedProcs] = useState<Procedure[]>([\n    initProc,\n  ]);\n  const [videoConfLinks, setVideoConfLinks] = useState<string[]>([\"\", \"\", \"\"]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSending, setIsSending] = useState(false);\n  const [previewQuote, setPreviewQuote] = useState<QuoteDataProps>();\n  const hospital: Hospital = useSelector(\n    (state: RootState) => state.hospital.current,\n  );\n\n  const updateNthLink = (nth: number, newLink: string) => {\n    const newLinks = [...videoConfLinks];\n    newLinks[nth] = newLink;\n    setVideoConfLinks(newLinks);\n  };\n\n  const updateWrapper = (nth: number) => (key: string, val: any) => {\n    const newProcs = [...recommendedProcs];\n    const newProc: { [key: string]: any; name: string } = { ...newProcs[nth] };\n    newProc[key] = val;\n    newProcs[nth] = newProc;\n    setRecommendedProcs(newProcs);\n  };\n\n  const addMoreProc = () => {\n    const newProcs = [...recommendedProcs];\n    newProcs.push(initProc);\n    setRecommendedProcs(newProcs);\n  };\n\n  const deleteNthProc = (nth: number) => () => {\n    const newProcs = [...recommendedProcs];\n    newProcs.splice(nth, 1);\n    setRecommendedProcs(newProcs);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quoteData = await getHospitalQuote({\n        hid: \"h1\",\n        qid: props.match.params.quoteId,\n      });\n      return quoteData.result;\n    };\n    fetchRequestQuotes()\n      .then((quote: QuoteDataProps) => {\n        setPreviewQuote(quote);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Preview\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const sendQuoteResponse = async () => {\n    setIsSending(true);\n    const isResponseSuccess = await respondQuote({\n      hid: \"h1\",\n      qid: props.match.params.quoteId,\n      meetLinks: videoConfLinks,\n      suggestedSurgeries: recommendedProcs,\n      responseTime: new Date().getTime(),\n    });\n    if (isResponseSuccess) {\n      setIsSending(false);\n      props.history.push(\"/hospital/my/sent\");\n    } else {\n      setIsSending(false);\n      // TODO: setShowErrorModal(true);\n    }\n  };\n\n  const isResponseFilled = () => {\n    const isVideoConfLinksFilled = videoConfLinks.every((link) => link !== \"\");\n    return isVideoConfLinksFilled;\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading containerType=\"preview\" />\n      ) : !previewQuote ? (\n        <EmptyDesc message=\"No quote found\" />\n      ) : (\n        <div className=\"hospital-mypage-preview-background-container\">\n          <div className=\"hospital-mypage-preview-container\">\n            <div className=\"hospital-mypage-go-back\">\n              <div\n                className=\"hospital-mypage-go-back-box\"\n                onClick={() => props.history.push(\"/hospital/my\")}\n              >\n                <img\n                  className=\"hospital-mypage-go-back-icon\"\n                  src={purple_go_back_arrow_icon}\n                  alt=\"mypage-go-back-icon\"\n                />\n                <FormattedMessage id=\"myPage\" />\n              </div>\n            </div>\n            <div className=\"hospital-mypage-sub-container-collection\">\n              <div className=\"hospital-mypage-sub-container\">\n                <div className=\"hospital-mypage-sub-container-title\">\n                  Request\n                </div>\n                <div className=\"hospital-mypage-sub-container-item\">\n                  <RequestHeader\n                    userName={previewQuote.userInfo.name}\n                    receivedTime={getKstDatetime(\n                      previewQuote.quoteInfo.timestamp,\n                    )}\n                  />\n                </div>\n                <RequestBody\n                  quote={previewQuote.quoteInfo.quote}\n                  comment={previewQuote.quoteInfo.comment}\n                />\n              </div>\n              <div className=\"hospital-mypage-sub-container\">\n                <div className=\"hospital-mypage-sub-container-title\">\n                  <FormattedMessage id=\"quote.yourQuotes\" />\n                </div>\n                <div className=\"hospital-mypage-sub-container-description\">\n                  <FormattedMessage id=\"quote.previewOfYourQuotes\" />\n                </div>\n                <div className=\"hospital-mypage-quote-preview-container\">\n                  <QuoteDetailHeader\n                    name={previewQuote.userInfo.name}\n                    hospitalName={hospital.name!}\n                    hospitalAddr={hospital.addr!}\n                    hospitalAbout={hospital.about!}\n                    interestedProcedures={getInterestedProcsFromQuote(\n                      previewQuote.quoteInfo.quote,\n                    )}\n                    isPreview={true}\n                  />\n                  <div className=\"hospital-mypage-quote-preview-proc-recommend-container\">\n                    <div className=\"hospital-mypage-quote-preview-proc-recommend-title\">\n                      <FormattedMessage id=\"quote.procedureRecommendation\" />\n                    </div>\n                    <div className=\"hospital-mypage-quote-preview-proc-recommend-input-collection\">\n                      {recommendedProcs.map((proc, ind) => (\n                        <div\n                          key={ind}\n                          className=\"hospital-mypage-quote-preview-proc-recommend-input-container\"\n                        >\n                          <ProcInput\n                            {...proc}\n                            update={updateWrapper(ind)}\n                            deletable={ind !== 0}\n                            deleteHandler={deleteNthProc(ind)}\n                          />\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"hospital-mypage-quote-preview-proc-recommend-more-container\">\n                      <div\n                        className=\"hospital-mypage-quote-preview-proc-recommend-more-text\"\n                        onClick={addMoreProc}\n                      >\n                        <div className=\"hospital-mypage-quote-preview-proc-recommend-more-plus\">\n                          +\n                        </div>{\" \"}\n                        <FormattedMessage id=\"quote.addMoreProcedure\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"hospital-mypage-sub-container\">\n                <div className=\"hospital-mypage-sub-container-title\">\n                  <FormattedMessage id=\"quote.videoConferenceLink\" />\n                </div>\n                <div className=\"hospital-mypage-sub-container-description\">\n                  <FormattedMessage id=\"quote.videoConferencePut\" />\n                </div>\n                <div className=\"hospital-mypage-video-conf-link-input-collection\">\n                  {videoConfLinks.map((link, ind) => (\n                    <InfoInput\n                      key={ind}\n                      title={`Day ${(ind + 1).toString()}`}\n                      value={link}\n                      onChange={(e) => updateNthLink(ind, e.target.value)}\n                    />\n                  ))}\n                </div>\n                <div className=\"hospital-mypage-send-quote-button-container\">\n                  <Button\n                    text=\"Send quote\"\n                    shape=\"round\"\n                    theme=\"primary\"\n                    onClick={sendQuoteResponse}\n                    isDisabled={!isResponseFilled()}\n                    isLoading={isSending}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Preview;\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Modal/Modal.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Reserve.tsx",["279"],"import React, { useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { getHospital } from \"../../api/hospital\";\nimport Button from \"../../components/Button/Button\";\nimport CalendarCarousel from \"../../components/Input/CalendarCarousel\";\nimport TimeMultipleSelection from \"../../components/Input/TimeMultipleSelection\";\nimport hospital_profile_default from \"../../images/hospital_profile_default.svg\";\nimport { Hospital } from \"../Hospital/Containers/Preview\";\nimport { Loading } from \"../Hospital/Containers/Request\";\nimport moment from \"moment\";\nimport \"moment-timezone\";\nimport \"./Reserve.scss\";\nimport { msOneHour } from \"../../utils\";\nimport { matchQuote } from \"../../api/quote\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst Reserve = (props: RouteComponentProps<any>) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSending, setIsSending] = useState(false);\n  const [date, setDate] = useState(\"\");\n  const [fullDate, setFullDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [hospital, setHospital] = useState<Hospital>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const initHospital = async () => {\n      // TODO: get hospital ID\n      const hospitalData = await getHospital({ hid: props.match.params.hid });\n      const hospital = hospitalData.result;\n      setHospital(hospital);\n    };\n    initHospital()\n      .then(() => {\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Reserve\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const matchQuoteHandler = async () => {\n    setIsSending(true);\n    const t = moment.tz(`${fullDate} ${time}`, \"Asia/Seoul\");\n    const consultTime = t.valueOf() + msOneHour;\n    const isSuccess = await matchQuote({\n      hid: props.match.params.hid,\n      qid: props.match.params.qid,\n      consultTime,\n    });\n    if (isSuccess) {\n      setIsSending(false);\n      props.history.push(\"/mypage/waiting\");\n    } else {\n      setIsSending(false);\n      // TODO: show modal error\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"reserve-container\">\n          <div className=\"reserve-hospital-desc-container\">\n            <div className=\"reserve-hospital-header-container\">\n              <div className=\"reserve-hospital-profile-container\">\n                <img\n                  className=\"reserve-hospital-profile-img\"\n                  src={hospital_profile_default}\n                  alt=\"hospital_profile_img\"\n                />\n              </div>\n              <div className=\"reserve-hospital-name\">{hospital?.name!}</div>\n            </div>\n            <div className=\"reserve-hospital-body-container\">\n              {hospital?.about!}\n            </div>\n          </div>\n          <div className=\"reserve-subtitle\">\n            <FormattedMessage id=\"reserve.date\" />\n          </div>\n          <CalendarCarousel\n            date={date}\n            setDate={setDate}\n            setFullDate={setFullDate}\n          />\n          <div className=\"reserve-subtitle\">\n            <FormattedMessage id=\"reserve.time\" />\n          </div>\n          <TimeMultipleSelection time={time} setTime={setTime} />\n          <div className=\"reserve-footer-button-container\">\n            <Button\n              text=\"Reserve\"\n              textId=\"button.reserve\"\n              shape=\"round\"\n              theme=\"primary\"\n              isLoading={isSending}\n              onClick={matchQuoteHandler}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Reserve;\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Navbar/MyPageNavbar.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Quotes.tsx",["280"],"import React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport QuoteCard from \"../../components/Card/QuoteCard\";\nimport { RootState } from \"../../store\";\nimport { RESPONDED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Quotes.scss\";\n\nconst Quotes = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [quotes, setQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === RESPONDED,\n      );\n    };\n    fetchQuotes()\n      .then((quotes) => {\n        setQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"quotes-container\">\n          <>\n            {quotes.length === 0 ? (\n              <FormattedMessage id=\"quote.youHaveNot\" />\n            ) : (\n              <>\n                <div className=\"quotes-timestamp-container\">Received today</div>\n                {quotes.map((quote: QuoteDataProps, i) => (\n                  <QuoteCard\n                    key={i}\n                    qid={quote.quoteInfo.id}\n                    hid={quote.hospitalInfo.id!}\n                    name={quote.hospitalInfo.name!}\n                    priceMin={800}\n                    priceMax={1200}\n                    suggestedSurgery={quote.suggestedSurgeries.map(\n                      (s: any) => s.name,\n                    )}\n                  />\n                ))}\n              </>\n            )}\n          </>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Quotes;\n","/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/WaitingCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/RequestCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/DoneCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Status/Status.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/ProcInput.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/ScheduleQuoteCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/SentQuoteCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/QuoteCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/TimeMultipleSelection.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Input/CalendarCarousel.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/SimpleCard.tsx",[],"/Users/haesol/Desktop/mediround-user-web-master/src/components/Card/Hospital/CommonQuoteCard.tsx",[],{"ruleId":"281","severity":1,"message":"282","line":5,"column":3,"nodeType":"283","messageId":"284","endLine":5,"endColumn":11},{"ruleId":"285","severity":1,"message":"286","line":313,"column":6,"nodeType":"287","endLine":313,"endColumn":8,"suggestions":"288"},{"ruleId":"285","severity":1,"message":"289","line":29,"column":6,"nodeType":"287","endLine":29,"endColumn":8,"suggestions":"290"},{"ruleId":"281","severity":1,"message":"291","line":48,"column":23,"nodeType":"283","messageId":"284","endLine":48,"endColumn":37},{"ruleId":"285","severity":1,"message":"292","line":117,"column":6,"nodeType":"287","endLine":117,"endColumn":42,"suggestions":"293"},{"ruleId":"281","severity":1,"message":"294","line":47,"column":10,"nodeType":"283","messageId":"284","endLine":47,"endColumn":19},{"ruleId":"285","severity":1,"message":"295","line":75,"column":6,"nodeType":"287","endLine":75,"endColumn":22,"suggestions":"296"},{"ruleId":"285","severity":1,"message":"297","line":93,"column":6,"nodeType":"287","endLine":93,"endColumn":8,"suggestions":"298"},{"ruleId":"285","severity":1,"message":"299","line":42,"column":6,"nodeType":"287","endLine":42,"endColumn":8,"suggestions":"300"},{"ruleId":"285","severity":1,"message":"301","line":36,"column":6,"nodeType":"287","endLine":36,"endColumn":8,"suggestions":"302"},{"ruleId":"285","severity":1,"message":"303","line":100,"column":6,"nodeType":"287","endLine":100,"endColumn":8,"suggestions":"304"},{"ruleId":"285","severity":1,"message":"305","line":41,"column":6,"nodeType":"287","endLine":41,"endColumn":8,"suggestions":"306"},{"ruleId":"285","severity":1,"message":"301","line":35,"column":6,"nodeType":"287","endLine":35,"endColumn":8,"suggestions":"307"},"@typescript-eslint/no-unused-vars","'MainPage' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.match.params.hid' and 'props.match.params.qid'. Either include them or remove the dependency array.","ArrayExpression",["308"],"React Hook useEffect has missing dependencies: 'history', 'location.search', and 'user'. Either include them or remove the dependency array.",["309"],"'setRootOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'intl'. Either include it or remove the dependency array.",["310"],"'isLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.viewType' and 'tabs'. Either include them or remove the dependency array. If 'setSelectedTab' needs the current value of 'props.viewType', you can also switch to useReducer instead of useState and read 'props.viewType' in the reducer.",["311"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["312"],"React Hook useEffect has a missing dependency: 'fetchMatchedQuotes'. Either include it or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'user.sub'. Either include it or remove the dependency array.",["314"],"React Hook useEffect has a missing dependency: 'props.match.params.quoteId'. Either include it or remove the dependency array.",["315"],"React Hook useEffect has a missing dependency: 'props.match.params.hid'. Either include it or remove the dependency array.",["316"],["317"],{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"330","fix":"336"},"Update the dependencies array to be: [props.match.params.hid, props.match.params.qid]",{"range":"337","text":"338"},"Update the dependencies array to be: [history, location.search, user]",{"range":"339","text":"340"},"Update the dependencies array to be: [step, rootOptions, result, subStep, intl]",{"range":"341","text":"342"},"Update the dependencies array to be: [props.location, props.viewType, tabs]",{"range":"343","text":"344"},"Update the dependencies array to be: [dispatch]",{"range":"345","text":"346"},"Update the dependencies array to be: [fetchMatchedQuotes]",{"range":"347","text":"348"},"Update the dependencies array to be: [user.sub]",{"range":"349","text":"350"},"Update the dependencies array to be: [props.match.params.quoteId]",{"range":"351","text":"352"},"Update the dependencies array to be: [props.match.params.hid]",{"range":"353","text":"354"},{"range":"355","text":"350"},[11853,11855],"[props.match.params.hid, props.match.params.qid]",[1209,1211],"[history, location.search, user]",[3948,3984],"[step, rootOptions, result, subStep, intl]",[2317,2333],"[props.location, props.viewType, tabs]",[2779,2781],"[dispatch]",[1588,1590],"[fetchMatchedQuotes]",[1263,1265],"[user.sub]",[3094,3096],"[props.match.params.quoteId]",[1573,1575],"[props.match.params.hid]",[1187,1189]]