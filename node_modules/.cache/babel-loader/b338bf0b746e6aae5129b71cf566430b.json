{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Request.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport RequestCard from \"../../../components/Card/RequestCard\";\nimport { PENDING } from \"../../../utils\";\nimport \"./Request.scss\";\nimport { FormattedMessage } from \"react-intl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Loading = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: `hospital-loading-container ${props.containerType ? props.containerType : \"loading-container\"}`,\n  children: \"Loading..\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 3\n}, this);\n_c = Loading;\nexport const EmptyDesc = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"hospital-mypage-no-request-text\",\n  children: props.messageId ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n    id: props.messageId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this) : props.message\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 3\n}, this);\n_c2 = EmptyDesc;\n\nconst Request = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [requestQuotes, setRequestQuotes] = useState([]);\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({\n        hid: \"h1\"\n      });\n      return quotesData.result.filter(quote => quote.status === PENDING);\n    };\n\n    fetchRequestQuotes().then(quotes => {\n      setRequestQuotes(quotes);\n      setIsLoading(false);\n    }).catch(e => {\n      console.error(\"Request\", e);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : requestQuotes.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyDesc, {\n      message: \"You haven\\u2019t received any quotes yet.\",\n      messageId: \"quote.youHaveNot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hospital-mypage-request-container\",\n      children: requestQuotes.map((quote, ind) => {\n        return /*#__PURE__*/_jsxDEV(RequestCard, {\n          quoteData: quote\n        }, ind, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Request, \"BopV/fsHEkfiMiOFD/qvBtqTROI=\");\n\n_c3 = Request;\nexport default Request;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Loading\");\n$RefreshReg$(_c2, \"EmptyDesc\");\n$RefreshReg$(_c3, \"Request\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Request.tsx"],"names":["React","useEffect","useState","fetchHospitalQuotes","RequestCard","PENDING","FormattedMessage","Loading","props","containerType","EmptyDesc","messageId","message","Request","isLoading","setIsLoading","requestQuotes","setRequestQuotes","fetchRequestQuotes","quotesData","hid","result","filter","quote","status","then","quotes","catch","e","console","error","length","map","ind"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,OAAOC,WAAP,MAAwC,sCAAxC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAO,gBAAP;AACA,SAASC,gBAAT,QAAiC,YAAjC;;;AA6BA,OAAO,MAAMC,OAAO,GAAIC,KAAD,iBACrB;AACE,EAAA,SAAS,EAAG,8BACVA,KAAK,CAACC,aAAN,GAAsBD,KAAK,CAACC,aAA5B,GAA4C,mBAC7C,EAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADK;KAAMF,O;AAeb,OAAO,MAAMG,SAAS,GAAIF,KAAD,iBACvB;AAAK,EAAA,SAAS,EAAC,iCAAf;AAAA,YACGA,KAAK,CAACG,SAAN,gBACC,QAAC,gBAAD;AAAkB,IAAA,EAAE,EAAEH,KAAK,CAACG;AAA5B;AAAA;AAAA;AAAA;AAAA,UADD,GAGCH,KAAK,CAACI;AAJV;AAAA;AAAA;AAAA;AAAA,QADK;MAAMF,S;;AAUb,MAAMG,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAMG,kBAAkB,GAAG,YAAY;AACrC;AACA,YAAMC,UAAU,GAAG,MAAMhB,mBAAmB,CAAC;AAAEiB,QAAAA,GAAG,EAAE;AAAP,OAAD,CAA5C;AACA,aAAOD,UAAU,CAACE,MAAX,CAAkBC,MAAlB,CACJC,KAAD,IAA2BA,KAAK,CAACC,MAAN,KAAiBnB,OADvC,CAAP;AAGD,KAND;;AAOAa,IAAAA,kBAAkB,GACfO,IADH,CACSC,MAAD,IAAY;AAChBT,MAAAA,gBAAgB,CAACS,MAAD,CAAhB;AACAX,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJH,EAKGY,KALH,CAKUC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAyBF,CAAzB;AACAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARH;AASD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACE;AAAA,cACGD,SAAS,gBACR,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADQ,GAENE,aAAa,CAACe,MAAd,KAAyB,CAAzB,gBACF,QAAC,SAAD;AACE,MAAA,OAAO,EAAC,2CADV;AAEE,MAAA,SAAS,EAAC;AAFZ;AAAA;AAAA;AAAA;AAAA,YADE,gBAMF;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,gBACGf,aAAa,CAACgB,GAAd,CAAkB,CAACT,KAAD,EAAQU,GAAR,KAAgB;AACjC,4BAAO,QAAC,WAAD;AAAuB,UAAA,SAAS,EAAEV;AAAlC,WAAkBU,GAAlB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA;AATJ,mBADF;AAkBD,CA1CD;;GAAMpB,O;;MAAAA,O;AA4CN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport RequestCard, { QuoteProps } from \"../../../components/Card/RequestCard\";\nimport { PENDING } from \"../../../utils\";\nimport { Hospital } from \"./Preview\";\nimport \"./Request.scss\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface UserInfoProps {\n  name: string;\n}\n\ninterface QuoteInfoProps {\n  quote: QuoteProps[];\n  comment: string;\n  timestamp: number;\n  id: string;\n}\n\nexport interface QuoteDataProps {\n  status: string;\n  userInfo: UserInfoProps;\n  quoteInfo: QuoteInfoProps;\n  hospitalInfo: Hospital;\n  isRead?: boolean;\n  responseTime?: number;\n  consultTime?: number;\n  suggestedSurgeries?: any;\n  meetLinks?: string[];\n}\n\ninterface LoadingProps {\n  containerType?: string;\n}\n\nexport const Loading = (props: LoadingProps) => (\n  <div\n    className={`hospital-loading-container ${\n      props.containerType ? props.containerType : \"loading-container\"\n    }`}\n  >\n    Loading..\n  </div>\n);\n\ninterface DescProps {\n  message: string;\n  messageId?: string;\n}\n\nexport const EmptyDesc = (props: DescProps) => (\n  <div className=\"hospital-mypage-no-request-text\">\n    {props.messageId ? (\n      <FormattedMessage id={props.messageId} />\n    ) : (\n      props.message\n    )}\n  </div>\n);\n\nconst Request = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [requestQuotes, setRequestQuotes] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({ hid: \"h1\" });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === PENDING,\n      );\n    };\n    fetchRequestQuotes()\n      .then((quotes) => {\n        setRequestQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Request\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : requestQuotes.length === 0 ? (\n        <EmptyDesc\n          message=\"You havenâ€™t received any quotes yet.\"\n          messageId=\"quote.youHaveNot\"\n        />\n      ) : (\n        <div className=\"hospital-mypage-request-container\">\n          {requestQuotes.map((quote, ind) => {\n            return <RequestCard key={ind} quoteData={quote} />;\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Request;\n"]},"metadata":{},"sourceType":"module"}