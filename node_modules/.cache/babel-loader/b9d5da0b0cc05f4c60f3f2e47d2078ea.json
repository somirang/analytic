{"ast":null,"code":"import _regeneratorRuntime from\"/Users/haesol/Desktop/mediround-user-web-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/haesol/Desktop/mediround-user-web-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/haesol/Desktop/mediround-user-web-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{FormattedMessage}from\"react-intl\";import{useSelector}from\"react-redux\";import{fetchUserQuotes}from\"../../api/quote\";import QuoteCard from\"../../components/Card/QuoteCard\";import{RESPONDED}from\"../../utils\";import{Loading}from\"../Hospital/Containers/Request\";import\"./Quotes.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Quotes=function Quotes(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),quotes=_useState4[0],setQuotes=_useState4[1];var user=useSelector(function(state){return state.user.current;});useEffect(function(){setIsLoading(true);var fetchQuotes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var quotesData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchUserQuotes({sub:user.sub});case 2:quotesData=_context.sent;return _context.abrupt(\"return\",quotesData.result.filter(function(quote){return quote.status===RESPONDED;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchQuotes(){return _ref.apply(this,arguments);};}();fetchQuotes().then(function(quotes){setQuotes(quotes);setIsLoading(false);}).catch(function(e){console.error(\"Quotes\",e);setIsLoading(false);});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(Loading,{}):/*#__PURE__*/_jsx(\"div\",{className:\"quotes-container\",children:/*#__PURE__*/_jsx(_Fragment,{children:quotes.length===0?/*#__PURE__*/_jsx(FormattedMessage,{id:\"quote.youHaveNot\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"quotes-timestamp-container\",children:\"Received today\"}),quotes.map(function(quote,i){return/*#__PURE__*/_jsx(QuoteCard,{qid:quote.quoteInfo.id,hid:quote.hospitalInfo.id,name:quote.hospitalInfo.name,priceMin:800,priceMax:1200,suggestedSurgery:quote.suggestedSurgeries.map(function(s){return s.name;})},i);})]})})})});};export default Quotes;","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Quotes.tsx"],"names":["React","useState","useEffect","FormattedMessage","useSelector","fetchUserQuotes","QuoteCard","RESPONDED","Loading","Quotes","isLoading","setIsLoading","quotes","setQuotes","user","state","current","fetchQuotes","sub","quotesData","result","filter","quote","status","then","catch","e","console","error","length","map","i","quoteInfo","id","hospitalInfo","name","suggestedSurgeries","s"],"mappings":"+eAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,gBAAT,KAAiC,YAAjC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,eAAT,KAAgC,iBAAhC,CAEA,MAAOC,CAAAA,SAAP,KAAsB,iCAAtB,CAEA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,OAAT,KAAwC,gCAAxC,CACA,MAAO,eAAP,C,6IAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,eACeR,QAAQ,CAAC,IAAD,CADvB,wCACZS,SADY,eACDC,YADC,8BAESV,QAAQ,CAAC,EAAD,CAFjB,yCAEZW,MAFY,eAEJC,SAFI,eAGnB,GAAMC,CAAAA,IAAe,CAAGV,WAAW,CAAC,SAACW,KAAD,QAAsBA,CAAAA,KAAK,CAACD,IAAN,CAAWE,OAAjC,EAAD,CAAnC,CAEAd,SAAS,CAAC,UAAM,CACdS,YAAY,CAAC,IAAD,CAAZ,CACA,GAAMM,CAAAA,WAAW,0FAAG,wKAEOZ,CAAAA,eAAe,CAAC,CAAEa,GAAG,CAAEJ,IAAI,CAACI,GAAZ,CAAD,CAFtB,QAEZC,UAFY,+CAGXA,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CACL,SAACC,KAAD,QAA2BA,CAAAA,KAAK,CAACC,MAAN,GAAiBhB,SAA5C,EADK,CAHW,wDAAH,kBAAXU,CAAAA,WAAW,0CAAjB,CAOAA,WAAW,GACRO,IADH,CACQ,SAACZ,MAAD,CAAY,CAChBC,SAAS,CAACD,MAAD,CAAT,CACAD,YAAY,CAAC,KAAD,CAAZ,CACD,CAJH,EAKGc,KALH,CAKS,SAACC,CAAD,CAAO,CACZC,OAAO,CAACC,KAAR,CAAc,QAAd,CAAwBF,CAAxB,EACAf,YAAY,CAAC,KAAD,CAAZ,CACD,CARH,EASD,CAlBQ,CAkBN,EAlBM,CAAT,CAoBA,mBACE,yBACGD,SAAS,cACR,KAAC,OAAD,IADQ,cAGR,YAAK,SAAS,CAAC,kBAAf,uBACE,yBACGE,MAAM,CAACiB,MAAP,GAAkB,CAAlB,cACC,KAAC,gBAAD,EAAkB,EAAE,CAAC,kBAArB,EADD,cAGC,wCACE,YAAK,SAAS,CAAC,4BAAf,4BADF,CAEGjB,MAAM,CAACkB,GAAP,CAAW,SAACR,KAAD,CAAwBS,CAAxB,qBACV,KAAC,SAAD,EAEE,GAAG,CAAET,KAAK,CAACU,SAAN,CAAgBC,EAFvB,CAGE,GAAG,CAAEX,KAAK,CAACY,YAAN,CAAmBD,EAH1B,CAIE,IAAI,CAAEX,KAAK,CAACY,YAAN,CAAmBC,IAJ3B,CAKE,QAAQ,CAAE,GALZ,CAME,QAAQ,CAAE,IANZ,CAOE,gBAAgB,CAAEb,KAAK,CAACc,kBAAN,CAAyBN,GAAzB,CAChB,SAACO,CAAD,QAAYA,CAAAA,CAAC,CAACF,IAAd,EADgB,CAPpB,EACOJ,CADP,CADU,EAAX,CAFH,GAJJ,EADF,EAJJ,EADF,CAgCD,CAzDD,CA2DA,cAAetB,CAAAA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport QuoteCard from \"../../components/Card/QuoteCard\";\nimport { RootState } from \"../../store\";\nimport { RESPONDED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Quotes.scss\";\n\nconst Quotes = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [quotes, setQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === RESPONDED,\n      );\n    };\n    fetchQuotes()\n      .then((quotes) => {\n        setQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"quotes-container\">\n          <>\n            {quotes.length === 0 ? (\n              <FormattedMessage id=\"quote.youHaveNot\" />\n            ) : (\n              <>\n                <div className=\"quotes-timestamp-container\">Received today</div>\n                {quotes.map((quote: QuoteDataProps, i) => (\n                  <QuoteCard\n                    key={i}\n                    qid={quote.quoteInfo.id}\n                    hid={quote.hospitalInfo.id!}\n                    name={quote.hospitalInfo.name!}\n                    priceMin={800}\n                    priceMax={1200}\n                    suggestedSurgery={quote.suggestedSurgeries.map(\n                      (s: any) => s.name,\n                    )}\n                  />\n                ))}\n              </>\n            )}\n          </>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Quotes;\n"]},"metadata":{},"sourceType":"module"}