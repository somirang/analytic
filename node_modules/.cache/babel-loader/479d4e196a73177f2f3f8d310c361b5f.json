{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Quotes.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport QuoteCard from \"../../components/Card/QuoteCard\";\nimport { RESPONDED } from \"../../utils\";\nimport { Loading } from \"../Hospital/Containers/Request\";\nimport \"./Quotes.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Quotes = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [quotes, setQuotes] = useState([]);\n  const user = useSelector(state => state.user.current);\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({\n        sub: user.sub\n      });\n      return quotesData.result.filter(quote => quote.status === RESPONDED);\n    };\n\n    fetchQuotes().then(quotes => {\n      setQuotes(quotes);\n      setIsLoading(false);\n    }).catch(e => {\n      console.error(\"Quotes\", e);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quotes-container\",\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: quotes.length === 0 ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n          id: \"quote.youHaveNot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"quotes-timestamp-container\",\n            children: \"Received today\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 17\n          }, this), quotes.map((quote, i) => /*#__PURE__*/_jsxDEV(QuoteCard, {\n            qid: quote.quoteInfo.id,\n            hid: quote.hospitalInfo.id,\n            name: quote.hospitalInfo.name,\n            priceMin: 800,\n            priceMax: 1200,\n            suggestedSurgery: quote.suggestedSurgeries.map(s => s.name)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Quotes, \"5R0uY9mIxRj0EOEhndk25TOg2xg=\", false, function () {\n  return [useSelector];\n});\n\n_c = Quotes;\nexport default Quotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Quotes.tsx"],"names":["React","useState","useEffect","FormattedMessage","useSelector","fetchUserQuotes","QuoteCard","RESPONDED","Loading","Quotes","isLoading","setIsLoading","quotes","setQuotes","user","state","current","fetchQuotes","quotesData","sub","result","filter","quote","status","then","catch","e","console","error","length","map","i","quoteInfo","id","hospitalInfo","name","suggestedSurgeries","s"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwC,gCAAxC;AACA,OAAO,eAAP;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMa,IAAe,GAAGV,WAAW,CAAEW,KAAD,IAAsBA,KAAK,CAACD,IAAN,CAAWE,OAAlC,CAAnC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAMM,WAAW,GAAG,YAAY;AAC9B;AACA,YAAMC,UAAU,GAAG,MAAMb,eAAe,CAAC;AAAEc,QAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,OAAD,CAAxC;AACA,aAAOD,UAAU,CAACE,MAAX,CAAkBC,MAAlB,CACJC,KAAD,IAA2BA,KAAK,CAACC,MAAN,KAAiBhB,SADvC,CAAP;AAGD,KAND;;AAOAU,IAAAA,WAAW,GACRO,IADH,CACSZ,MAAD,IAAY;AAChBC,MAAAA,SAAS,CAACD,MAAD,CAAT;AACAD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJH,EAKGc,KALH,CAKUC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,QAAd,EAAwBF,CAAxB;AACAf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARH;AASD,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,sBACE;AAAA,cACGD,SAAS,gBACR,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACE;AAAA,kBACGE,MAAM,CAACiB,MAAP,KAAkB,CAAlB,gBACC,QAAC,gBAAD;AAAkB,UAAA,EAAE,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGC;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEGjB,MAAM,CAACkB,GAAP,CAAW,CAACR,KAAD,EAAwBS,CAAxB,kBACV,QAAC,SAAD;AAEE,YAAA,GAAG,EAAET,KAAK,CAACU,SAAN,CAAgBC,EAFvB;AAGE,YAAA,GAAG,EAAEX,KAAK,CAACY,YAAN,CAAmBD,EAH1B;AAIE,YAAA,IAAI,EAAEX,KAAK,CAACY,YAAN,CAAmBC,IAJ3B;AAKE,YAAA,QAAQ,EAAE,GALZ;AAME,YAAA,QAAQ,EAAE,IANZ;AAOE,YAAA,gBAAgB,EAAEb,KAAK,CAACc,kBAAN,CAAyBN,GAAzB,CACfO,CAAD,IAAYA,CAAC,CAACF,IADE;AAPpB,aACOJ,CADP;AAAA;AAAA;AAAA;AAAA,kBADD,CAFH;AAAA;AAJJ;AADF;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAgCD,CAzDD;;GAAMtB,M;UAGoBL,W;;;KAHpBK,M;AA2DN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport QuoteCard from \"../../components/Card/QuoteCard\";\nimport { RootState } from \"../../store\";\nimport { RESPONDED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Quotes.scss\";\n\nconst Quotes = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [quotes, setQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === RESPONDED,\n      );\n    };\n    fetchQuotes()\n      .then((quotes) => {\n        setQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"quotes-container\">\n          <>\n            {quotes.length === 0 ? (\n              <FormattedMessage id=\"quote.youHaveNot\" />\n            ) : (\n              <>\n                <div className=\"quotes-timestamp-container\">Received today</div>\n                {quotes.map((quote: QuoteDataProps, i) => (\n                  <QuoteCard\n                    key={i}\n                    qid={quote.quoteInfo.id}\n                    hid={quote.hospitalInfo.id!}\n                    name={quote.hospitalInfo.name!}\n                    priceMin={800}\n                    priceMax={1200}\n                    suggestedSurgery={quote.suggestedSurgeries.map(\n                      (s: any) => s.name,\n                    )}\n                  />\n                ))}\n              </>\n            )}\n          </>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Quotes;\n"]},"metadata":{},"sourceType":"module"}