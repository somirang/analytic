{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/DescriptionButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport downArrowIcon from \"../../images/down-arrow-icon.svg\";\nimport \"./DescriptionButton.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DescriptionButton = props => {\n  _s();\n\n  const [isSelected, setIsSelected] = useState(false);\n  const [isArrowUp, setIsArrowUp] = useState(false);\n  useEffect(() => {\n    const selected = props.selectedIds.includes(props.id);\n    setIsSelected(selected);\n  }, [props.selectedIds, props.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `description-button-container ${isSelected ? \"selected\" : \"\"}`,\n    onClick: props.onClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description-button-text\",\n      children: props.textId ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n        id: props.textId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 25\n      }, this) : props.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      className: `description-button-arrow ${isArrowUp ? \"rotated\" : \"\"}`,\n      src: downArrowIcon,\n      alt: \"down-arrow\",\n      onClick: e => {\n        e.stopPropagation();\n        setIsArrowUp(!isArrowUp);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DescriptionButton, \"8QSa9tNQP2XxZIqOzZ+//uCS3uY=\");\n\n_c = DescriptionButton;\nexport default DescriptionButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"DescriptionButton\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/components/Button/DescriptionButton.tsx"],"names":["React","useState","useEffect","FormattedMessage","DescriptionButton","props","isSelected","setIsSelected","isArrowUp","setIsArrowUp","selected","selectedIds","includes","id","onClick","textId","text","downArrowIcon","e","stopPropagation"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,OAAO,0BAAP;;;AAUA,MAAMC,iBAAiB,GAAIC,KAAD,IAAkB;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,QAAQ,GAAGL,KAAK,CAACM,WAAN,CAAmBC,QAAnB,CAA4BP,KAAK,CAACQ,EAAlC,CAAjB;AACAN,IAAAA,aAAa,CAACG,QAAD,CAAb;AACD,GAHQ,EAGN,CAACL,KAAK,CAACM,WAAP,EAAoBN,KAAK,CAACQ,EAA1B,CAHM,CAAT;AAKA,sBACE;AACE,IAAA,SAAS,EAAG,gCAA+BP,UAAU,GAAG,UAAH,GAAgB,EAAG,EAD1E;AAEE,IAAA,OAAO,EAAED,KAAK,CAACS,OAFjB;AAAA,4BAIE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA,gBACGT,KAAK,CAACU,MAAN,gBAAe,QAAC,gBAAD;AAAkB,QAAA,EAAE,EAAEV,KAAK,CAACU;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAf,GAAwDV,KAAK,CAACW;AADjE;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE;AACE,MAAA,SAAS,EAAG,4BAA2BR,SAAS,GAAG,SAAH,GAAe,EAAG,EADpE;AAEE,MAAA,GAAG,EAAES,aAFP;AAGE,MAAA,GAAG,EAAC,YAHN;AAIE,MAAA,OAAO,EAAGC,CAAD,IAAO;AACdA,QAAAA,CAAC,CAACC,eAAF;AACAV,QAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA5BD;;GAAMJ,iB;;KAAAA,iB;AA8BN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport downArrowIcon from \"../../images/down-arrow-icon.svg\";\nimport \"./DescriptionButton.scss\";\n\ninterface Props {\n  text: string;\n  textId?: string;\n  id: string;\n  onClick: () => void;\n  selectedIds: string[];\n}\n\nconst DescriptionButton = (props: Props) => {\n  const [isSelected, setIsSelected] = useState(false);\n  const [isArrowUp, setIsArrowUp] = useState(false);\n\n  useEffect(() => {\n    const selected = props.selectedIds!.includes(props.id);\n    setIsSelected(selected);\n  }, [props.selectedIds, props.id]);\n\n  return (\n    <div\n      className={`description-button-container ${isSelected ? \"selected\" : \"\"}`}\n      onClick={props.onClick}\n    >\n      <div className=\"description-button-text\">\n        {props.textId ? <FormattedMessage id={props.textId} /> : props.text}\n      </div>\n      <img\n        className={`description-button-arrow ${isArrowUp ? \"rotated\" : \"\"}`}\n        src={downArrowIcon}\n        alt=\"down-arrow\"\n        onClick={(e) => {\n          e.stopPropagation();\n          setIsArrowUp(!isArrowUp);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default DescriptionButton;\n"]},"metadata":{},"sourceType":"module"}