{"ast":null,"code":"import _regeneratorRuntime from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{fetchHospitalQuotes}from\"../../../api/quote\";import SentQuoteCard from\"../../../components/Card/Hospital/SentQuoteCard\";import{RESPONDED}from\"../../../utils\";import\"./CardListView.scss\";import{EmptyDesc,Loading}from\"./Request\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var Legend=function Legend(props){var itemList=[\"Patient name\",\"Interested procedures\",\"Recommendation\",props.mode===\"sent\"?\"Status\":\"Time\"];return/*#__PURE__*/_jsx(\"div\",{className:\"legend-container\",children:itemList.map(function(item,ind){return/*#__PURE__*/_jsx(\"div\",{className:\"legend-item\",children:item},ind);})});};var Sent=function Sent(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),sentQuotes=_useState4[0],setSentQuotes=_useState4[1];useEffect(function(){setIsLoading(true);var fetchRequestQuotes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var quotesData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchHospitalQuotes({hid:\"h1\"});case 2:quotesData=_context.sent;return _context.abrupt(\"return\",quotesData.result.filter(function(quote){return quote.status===RESPONDED;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchRequestQuotes(){return _ref.apply(this,arguments);};}();fetchRequestQuotes().then(function(quotes){setSentQuotes(quotes);setIsLoading(false);}).catch(function(e){console.error(\"Sent\",e);setIsLoading(false);});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(Loading,{}):/*#__PURE__*/_jsx(\"div\",{className:\"hospital-card-list-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"hospital-card-list\",children:[/*#__PURE__*/_jsx(Legend,{mode:\"sent\"}),sentQuotes.length===0?/*#__PURE__*/_jsx(EmptyDesc,{message:\"You haven\\u2019t sent any quotes yet.\"}):sentQuotes.map(function(quote,i){return/*#__PURE__*/_jsx(\"div\",{className:\"hospital-card-list-item\",children:/*#__PURE__*/_jsx(SentQuoteCard,{patientName:quote.userInfo.name,isRead:quote.isRead,timestamp:quote.responseTime})},i);})]})})});};export default Sent;","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web/src/pages/Hospital/Containers/Sent.tsx"],"names":["React","useEffect","useState","fetchHospitalQuotes","SentQuoteCard","RESPONDED","EmptyDesc","Loading","Legend","props","itemList","mode","map","item","ind","Sent","isLoading","setIsLoading","sentQuotes","setSentQuotes","fetchRequestQuotes","hid","quotesData","result","filter","quote","status","then","quotes","catch","e","console","error","length","i","userInfo","name","isRead","responseTime"],"mappings":"0dAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,mBAAT,KAAoC,oBAApC,CACA,MAAOC,CAAAA,aAAP,KAA0B,iDAA1B,CACA,OAASC,SAAT,KAA0B,gBAA1B,CACA,MAAO,qBAAP,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmD,WAAnD,C,6IAMA,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAwB,CAC5C,GAAMC,CAAAA,QAAQ,CAAG,CACf,cADe,CAEf,uBAFe,CAGf,gBAHe,CAIfD,KAAK,CAACE,IAAN,GAAe,MAAf,CAAwB,QAAxB,CAAmC,MAJpB,CAAjB,CAMA,mBACE,YAAK,SAAS,CAAC,kBAAf,UACGD,QAAQ,CAACE,GAAT,CAAa,SAACC,IAAD,CAAOC,GAAP,qBACZ,YAAK,SAAS,CAAC,aAAf,UACGD,IADH,EAAkCC,GAAlC,CADY,EAAb,CADH,EADF,CASD,CAhBM,CAkBP,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,eACiBb,QAAQ,CAAC,IAAD,CADzB,wCACVc,SADU,eACCC,YADD,8BAEmBf,QAAQ,CAAC,EAAD,CAF3B,yCAEVgB,UAFU,eAEEC,aAFF,eAIjBlB,SAAS,CAAC,UAAM,CACdgB,YAAY,CAAC,IAAD,CAAZ,CACA,GAAMG,CAAAA,kBAAkB,0FAAG,wKAEAjB,CAAAA,mBAAmB,CAAC,CAAEkB,GAAG,CAAE,IAAP,CAAD,CAFnB,QAEnBC,UAFmB,+CAGlBA,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CACL,SAACC,KAAD,QAA2BA,CAAAA,KAAK,CAACC,MAAN,GAAiBrB,SAA5C,EADK,CAHkB,wDAAH,kBAAlBe,CAAAA,kBAAkB,0CAAxB,CAOAA,kBAAkB,GACfO,IADH,CACQ,SAACC,MAAD,CAAY,CAChBT,aAAa,CAACS,MAAD,CAAb,CACAX,YAAY,CAAC,KAAD,CAAZ,CACD,CAJH,EAKGY,KALH,CAKS,SAACC,CAAD,CAAO,CACZC,OAAO,CAACC,KAAR,CAAc,MAAd,CAAsBF,CAAtB,EACAb,YAAY,CAAC,KAAD,CAAZ,CACD,CARH,EASD,CAlBQ,CAkBN,EAlBM,CAAT,CAoBA,mBACE,yBACGD,SAAS,cACR,KAAC,OAAD,IADQ,cAGR,YAAK,SAAS,CAAC,8BAAf,uBACE,aAAK,SAAS,CAAC,oBAAf,wBACE,KAAC,MAAD,EAAQ,IAAI,CAAC,MAAb,EADF,CAEGE,UAAU,CAACe,MAAX,GAAsB,CAAtB,cACC,KAAC,SAAD,EAAW,OAAO,CAAC,uCAAnB,EADD,CAGCf,UAAU,CAACN,GAAX,CAAe,SAACa,KAAD,CAAwBS,CAAxB,qBACb,YAAK,SAAS,CAAC,yBAAf,uBACE,KAAC,aAAD,EACE,WAAW,CAAET,KAAK,CAACU,QAAN,CAAeC,IAD9B,CAEE,MAAM,CAAEX,KAAK,CAACY,MAFhB,CAGE,SAAS,CAAEZ,KAAK,CAACa,YAHnB,EADF,EAA8CJ,CAA9C,CADa,EAAf,CALJ,GADF,EAJJ,EADF,CA0BD,CAlDD,CAoDA,cAAenB,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport SentQuoteCard from \"../../../components/Card/Hospital/SentQuoteCard\";\nimport { RESPONDED } from \"../../../utils\";\nimport \"./CardListView.scss\";\nimport { EmptyDesc, Loading, QuoteDataProps } from \"./Request\";\n\ninterface LegendProps {\n  mode: string;\n}\n\nexport const Legend = (props: LegendProps) => {\n  const itemList = [\n    \"Patient name\",\n    \"Interested procedures\",\n    \"Recommendation\",\n    props.mode === \"sent\" ? \"Status\" : \"Time\",\n  ];\n  return (\n    <div className=\"legend-container\">\n      {itemList.map((item, ind) => (\n        <div className=\"legend-item\" key={ind}>\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Sent = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [sentQuotes, setSentQuotes] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({ hid: \"h1\" });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === RESPONDED,\n      );\n    };\n    fetchRequestQuotes()\n      .then((quotes) => {\n        setSentQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Sent\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"hospital-card-list-container\">\n          <div className=\"hospital-card-list\">\n            <Legend mode=\"sent\" />\n            {sentQuotes.length === 0 ? (\n              <EmptyDesc message=\"You havenâ€™t sent any quotes yet.\" />\n            ) : (\n              sentQuotes.map((quote: QuoteDataProps, i) => (\n                <div className=\"hospital-card-list-item\" key={i}>\n                  <SentQuoteCard\n                    patientName={quote.userInfo.name}\n                    isRead={quote.isRead}\n                    timestamp={quote.responseTime}\n                  />\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Sent;\n"]},"metadata":{},"sourceType":"module"}