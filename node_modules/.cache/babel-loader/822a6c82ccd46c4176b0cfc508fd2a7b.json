{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/auth/auth.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\nimport Pool from \"../aws/UserPool\";\nimport { useDispatch } from \"react-redux\";\nimport { setUser } from \"../store/reducers/user\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\nconst Auth = props => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  const getSession = async () => {\n    const user = Pool.getCurrentUser();\n    let userObj = {};\n\n    if (user) {\n      await user.getSession((err, session) => {\n        if (err) {\n          console.log(\"eee\", err);\n\n          switch (err.name) {\n            case \"UserNotFoundException\":\n              dispatch(setUser({}));\n              if (user) user.signOut();\n              return {};\n\n            default:\n              console.error(\"ERROR\");\n              throw err;\n          }\n        } else {\n          console.log(\"session\", session);\n          const userAttributes = {};\n          user.getUserAttributes((err, attributes) => {\n            if (err) {\n              switch (err.name) {\n                case \"UserNotFoundException\":\n                  dispatch(setUser({}));\n                  if (user) user.signOut();\n                  return {};\n\n                default:\n                  console.error(\"ERROR\");\n                  throw err;\n              }\n            } else {\n              if (attributes) {\n                for (let attribute of attributes) {\n                  const {\n                    Name,\n                    Value\n                  } = attribute;\n                  userAttributes[Name] = Value;\n                }\n              }\n            }\n          });\n          userObj = session.getIdToken().payload;\n          dispatch(setUser(userObj));\n          console.log(\"uuu\"); // const token = session.getIdToken().getJwtToken();\n          // userObj = {\n          //   user,\n          //   headers: { Authorization: token },\n          //   ...session,\n          //   ...userAttributes,\n          // };\n        }\n      });\n      return userObj;\n    }\n  };\n\n  const authenticate = (Username, Password) => {\n    return new Promise((resolve, reject) => {\n      const user = new CognitoUser({\n        Username,\n        Pool\n      });\n      const authDetails = new AuthenticationDetails({\n        Username,\n        Password\n      });\n      user.authenticateUser(authDetails, {\n        onSuccess: data => {\n          console.log(\"onSuccess:\", data);\n\n          if (data) {\n            dispatch(setUser(data.getIdToken().payload));\n            resolve(data.getIdToken().payload);\n          }\n        },\n        onFailure: err => {\n          console.error(\"onFailure:\", err);\n          reject(err);\n        },\n        newPasswordRequired: data => {\n          console.log(\"newPasswordRequired:\", data);\n          resolve(data);\n        }\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n\n    if (user) {\n      dispatch(setUser({}));\n      user.signOut();\n      window.open(\"/\", \"_self\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticate,\n      getSession,\n      logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Auth;\nexport const useAuthContext = () => {\n  _s2();\n\n  return useContext(AuthContext);\n};\n\n_s2(useAuthContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport default Auth;\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/auth/auth.tsx"],"names":["React","createContext","useContext","CognitoUser","AuthenticationDetails","Pool","useDispatch","setUser","AuthContext","Auth","props","dispatch","getSession","user","getCurrentUser","userObj","err","session","console","log","name","signOut","error","userAttributes","getUserAttributes","attributes","attribute","Name","Value","getIdToken","payload","authenticate","Username","Password","Promise","resolve","reject","authDetails","authenticateUser","onSuccess","data","onFailure","newPasswordRequired","logout","window","open","children","useAuthContext"],"mappings":"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","sourcesContent":["import React, { createContext, useContext } from \"react\";\nimport { CognitoUser, AuthenticationDetails } from \"amazon-cognito-identity-js\";\n\nimport Pool from \"../aws/UserPool\";\nimport { useDispatch } from \"react-redux\";\nimport { setUser } from \"../store/reducers/user\";\n\ninterface AuthContextType {\n  authenticate: (Username: string, Password: string) => Promise<any>;\n  getSession: () => any;\n  logout: () => void;\n}\n\nexport interface UserProps {\n  name?: string;\n  sub?: string;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nconst Auth = (props: any) => {\n  const dispatch = useDispatch();\n\n  const getSession = async () => {\n    const user = Pool.getCurrentUser();\n    let userObj = {};\n    if (user) {\n      await user.getSession((err: any, session: any) => {\n        if (err) {\n          console.log(\"eee\", err);\n          switch (err.name) {\n            case \"UserNotFoundException\":\n              dispatch(setUser({}));\n              if (user) user.signOut();\n              return {};\n            default:\n              console.error(\"ERROR\");\n              throw err;\n          }\n        } else {\n          console.log(\"session\", session);\n          const userAttributes: { [id: string]: any } = {};\n          user.getUserAttributes((err, attributes) => {\n            if (err) {\n              switch (err.name) {\n                case \"UserNotFoundException\":\n                  dispatch(setUser({}));\n                  if (user) user.signOut();\n                  return {};\n                default:\n                  console.error(\"ERROR\");\n                  throw err;\n              }\n            } else {\n              if (attributes) {\n                for (let attribute of attributes) {\n                  const { Name, Value } = attribute;\n                  userAttributes[Name] = Value;\n                }\n              }\n            }\n          });\n          userObj = session.getIdToken().payload;\n          dispatch(setUser(userObj));\n          console.log(\"uuu\");\n          // const token = session.getIdToken().getJwtToken();\n          // userObj = {\n          //   user,\n          //   headers: { Authorization: token },\n          //   ...session,\n          //   ...userAttributes,\n          // };\n        }\n      });\n      return userObj;\n    }\n  };\n\n  const authenticate = (Username: string, Password: string) => {\n    return new Promise((resolve, reject) => {\n      const user = new CognitoUser({ Username, Pool });\n      const authDetails = new AuthenticationDetails({ Username, Password });\n\n      user.authenticateUser(authDetails, {\n        onSuccess: (data) => {\n          console.log(\"onSuccess:\", data);\n          if (data) {\n            dispatch(setUser(data.getIdToken().payload));\n            resolve(data.getIdToken().payload);\n          }\n        },\n        onFailure: (err) => {\n          console.error(\"onFailure:\", err);\n          reject(err);\n        },\n        newPasswordRequired: (data) => {\n          console.log(\"newPasswordRequired:\", data);\n          resolve(data);\n        },\n      });\n    });\n  };\n\n  const logout = () => {\n    const user = Pool.getCurrentUser();\n    if (user) {\n      dispatch(setUser({}));\n      user.signOut();\n      window.open(\"/\", \"_self\");\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ authenticate, getSession, logout }}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuthContext = () => useContext(AuthContext);\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}