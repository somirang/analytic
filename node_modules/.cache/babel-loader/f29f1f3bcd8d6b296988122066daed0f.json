{"ast":null,"code":"import _regeneratorRuntime from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{fetchHospitalQuotes}from\"../../../api/quote\";import ScheduleQuoteCard from\"../../../components/Card/Hospital/ScheduleQuoteCard\";import{MATCHED}from\"../../../utils\";import\"./CardListView.scss\";import{Loading}from\"./Request\";import{Legend}from\"./Sent\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Schedule=function Schedule(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),scheduledQuotes=_useState4[0],setScheduledQuotes=_useState4[1];useEffect(function(){setIsLoading(true);var fetchRequestQuotes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var quotesData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchHospitalQuotes({hid:\"h1\"});case 2:quotesData=_context.sent;return _context.abrupt(\"return\",quotesData.result.filter(function(quote){return quote.status===MATCHED;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchRequestQuotes(){return _ref.apply(this,arguments);};}();fetchRequestQuotes().then(function(quotes){setScheduledQuotes(quotes);setIsLoading(false);}).catch(function(e){console.error(\"Schedule\",e);setIsLoading(false);});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(Loading,{}):/*#__PURE__*/_jsx(\"div\",{className:\"hospital-card-list-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"hospital-card-list\",children:[/*#__PURE__*/_jsx(Legend,{mode:\"schedule\"}),scheduledQuotes.map(function(quote,i){return/*#__PURE__*/_jsx(\"div\",{className:\"hospital-card-list-item\",children:/*#__PURE__*/_jsx(ScheduleQuoteCard,{patientName:quote.userInfo.name,timestamp:quote.consultTime})},i);})]})})});};export default Schedule;","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web/src/pages/Hospital/Containers/Schedule.tsx"],"names":["React","useEffect","useState","fetchHospitalQuotes","ScheduleQuoteCard","MATCHED","Loading","Legend","Schedule","isLoading","setIsLoading","scheduledQuotes","setScheduledQuotes","fetchRequestQuotes","hid","quotesData","result","filter","quote","status","then","quotes","catch","e","console","error","map","i","userInfo","name","consultTime"],"mappings":"0dAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,mBAAT,KAAoC,oBAApC,CACA,MAAOC,CAAAA,iBAAP,KAA8B,qDAA9B,CACA,OAASC,OAAT,KAAwB,gBAAxB,CACA,MAAO,qBAAP,CACA,OAASC,OAAT,KAAwC,WAAxC,CACA,OAASC,MAAT,KAAuB,QAAvB,C,6IAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,eACaN,QAAQ,CAAC,IAAD,CADrB,wCACdO,SADc,eACHC,YADG,8BAEyBR,QAAQ,CAAC,EAAD,CAFjC,yCAEdS,eAFc,eAEGC,kBAFH,eAIrBX,SAAS,CAAC,UAAM,CACdS,YAAY,CAAC,IAAD,CAAZ,CACA,GAAMG,CAAAA,kBAAkB,0FAAG,wKAEAV,CAAAA,mBAAmB,CAAC,CAAEW,GAAG,CAAE,IAAP,CAAD,CAFnB,QAEnBC,UAFmB,+CAGlBA,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CACL,SAACC,KAAD,QAA2BA,CAAAA,KAAK,CAACC,MAAN,GAAiBd,OAA5C,EADK,CAHkB,wDAAH,kBAAlBQ,CAAAA,kBAAkB,0CAAxB,CAOAA,kBAAkB,GACfO,IADH,CACQ,SAACC,MAAD,CAAY,CAChBT,kBAAkB,CAACS,MAAD,CAAlB,CACAX,YAAY,CAAC,KAAD,CAAZ,CACD,CAJH,EAKGY,KALH,CAKS,SAACC,CAAD,CAAO,CACZC,OAAO,CAACC,KAAR,CAAc,UAAd,CAA0BF,CAA1B,EACAb,YAAY,CAAC,KAAD,CAAZ,CACD,CARH,EASD,CAlBQ,CAkBN,EAlBM,CAAT,CAmBA,mBACE,yBACGD,SAAS,cACR,KAAC,OAAD,IADQ,cAGR,YAAK,SAAS,CAAC,8BAAf,uBACE,aAAK,SAAS,CAAC,oBAAf,wBACE,KAAC,MAAD,EAAQ,IAAI,CAAC,UAAb,EADF,CAEGE,eAAe,CAACe,GAAhB,CAAoB,SAACR,KAAD,CAAwBS,CAAxB,qBACnB,YAAK,SAAS,CAAC,yBAAf,uBACE,KAAC,iBAAD,EACE,WAAW,CAAET,KAAK,CAACU,QAAN,CAAeC,IAD9B,CAEE,SAAS,CAAEX,KAAK,CAACY,WAFnB,EADF,EAA8CH,CAA9C,CADmB,EAApB,CAFH,GADF,EAJJ,EADF,CAqBD,CA5CD,CA8CA,cAAenB,CAAAA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport ScheduleQuoteCard from \"../../../components/Card/Hospital/ScheduleQuoteCard\";\nimport { MATCHED } from \"../../../utils\";\nimport \"./CardListView.scss\";\nimport { Loading, QuoteDataProps } from \"./Request\";\nimport { Legend } from \"./Sent\";\n\nconst Schedule = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [scheduledQuotes, setScheduledQuotes] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({ hid: \"h1\" });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === MATCHED,\n      );\n    };\n    fetchRequestQuotes()\n      .then((quotes) => {\n        setScheduledQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Schedule\", e);\n        setIsLoading(false);\n      });\n  }, []);\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"hospital-card-list-container\">\n          <div className=\"hospital-card-list\">\n            <Legend mode=\"schedule\" />\n            {scheduledQuotes.map((quote: QuoteDataProps, i) => (\n              <div className=\"hospital-card-list-item\" key={i}>\n                <ScheduleQuoteCard\n                  patientName={quote.userInfo.name}\n                  timestamp={quote.consultTime}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Schedule;\n"]},"metadata":{},"sourceType":"module"}