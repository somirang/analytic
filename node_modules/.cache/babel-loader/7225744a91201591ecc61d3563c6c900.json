{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Waiting.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes, rejectQuote } from \"../../api/quote\";\nimport WaitingCard from \"../../components/Card/WaitingCard\";\nimport Modal from \"../../components/Modal/Modal\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading } from \"../Hospital/Containers/Request\";\nimport \"./Waiting.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Waiting = props => {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [matchedQuotes, setMatchedQuotes] = useState([]);\n  const [targetHid, setTargetHid] = useState(\"\");\n  const [targetQid, setTargetQid] = useState(\"\");\n  const [isRejecting, setIsRejecting] = useState(false);\n  const user = useSelector(state => state.user.current);\n\n  const fetchMatchedQuotes = async () => {\n    // TODO: get hospital Id\n    const quotesData = await fetchUserQuotes({\n      sub: user.sub\n    });\n    return quotesData.result.filter(quote => quote.status === MATCHED);\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMatchedQuotes().then(quotes => {\n      setMatchedQuotes(quotes);\n      setIsLoading(false);\n    }).catch(e => {\n      console.error(\"Quotes\", e);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const onCancelHandler = (hid, qid) => {\n    setTargetHid(hid);\n    setTargetQid(qid);\n    setShowModal(true);\n  };\n\n  const rescheduleHandler = (hid, qid) => {\n    props.history.push(`/mypage/reserve/${hid}/${qid}`);\n  };\n\n  const rejectQuoteHandler = async (hid, qid) => {\n    setIsRejecting(true);\n    const isSuccess = await rejectQuote({\n      hid,\n      qid\n    });\n\n    if (isSuccess) {\n      setIsRejecting(false);\n      setShowModal(false);\n      setIsLoading(true);\n      fetchMatchedQuotes().then(quotes => {\n        setMatchedQuotes(quotes);\n        setIsLoading(false);\n      }).catch(e => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n    } else {\n      setIsRejecting(false); // TODO: show error modal\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"waiting-container\",\n      children: [matchedQuotes.length === 0 ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n        id: \"waiting.youHaveNot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this) : matchedQuotes.map((quote, i) => /*#__PURE__*/_jsxDEV(WaitingCard, {\n        name: quote.hospitalInfo.name,\n        hid: quote.hospitalInfo.id,\n        qid: quote.quoteInfo.id,\n        date: getCstFullDatetimeString(quote.consultTime),\n        onCancelHandler: onCancelHandler,\n        videoLink: quote.meetLinks[0]\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this)), showModal && /*#__PURE__*/_jsxDEV(Modal, {\n        openController: setShowModal,\n        header: \"Are you sure you want to cancel?\",\n        headerId: \"cancel.msg\",\n        body: \"We might have another schedule that fit yours if you want to reschedule.\",\n        bodyId: \"cancel.text\",\n        closableByClickOutside: true,\n        leftButtonProps: {\n          text: \"Reschedule\",\n          textId: \"button.reschedule\",\n          theme: \"primary\",\n          shape: \"square\",\n          style: {\n            fontSize: \"12px\",\n            fontWeight: \"700\",\n            height: \"40px\"\n          },\n          onClick: () => rescheduleHandler(targetHid, targetQid)\n        },\n        rightButtonProps: {\n          text: \"Yes, cancel\",\n          textId: \"button.yesCancel\",\n          theme: \"white\",\n          shape: \"square\",\n          style: {\n            fontSize: \"12px\",\n            fontWeight: \"700\",\n            height: \"40px\"\n          },\n          isLoading: isRejecting,\n          onClick: () => rejectQuoteHandler(targetHid, targetQid)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Waiting, \"jFauKN0D6npHjWuthCqFULWosXQ=\", false, function () {\n  return [useSelector];\n});\n\n_c = Waiting;\nexport default Waiting;\n\nvar _c;\n\n$RefreshReg$(_c, \"Waiting\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Waiting.tsx"],"names":["React","useEffect","useState","FormattedMessage","useSelector","fetchUserQuotes","rejectQuote","WaitingCard","Modal","getCstFullDatetimeString","MATCHED","Loading","Waiting","props","showModal","setShowModal","isLoading","setIsLoading","matchedQuotes","setMatchedQuotes","targetHid","setTargetHid","targetQid","setTargetQid","isRejecting","setIsRejecting","user","state","current","fetchMatchedQuotes","quotesData","sub","result","filter","quote","status","then","quotes","catch","e","console","error","onCancelHandler","hid","qid","rescheduleHandler","history","push","rejectQuoteHandler","isSuccess","length","map","i","hospitalInfo","name","id","quoteInfo","consultTime","meetLinks","text","textId","theme","shape","style","fontSize","fontWeight","height","onClick"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { RouteComponentProps } from \"react-router\";\nimport { fetchUserQuotes, rejectQuote } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport WaitingCard from \"../../components/Card/WaitingCard\";\nimport Modal from \"../../components/Modal/Modal\";\nimport { RootState } from \"../../store\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Waiting.scss\";\n\nconst Waiting = (props: RouteComponentProps) => {\n  const [showModal, setShowModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [matchedQuotes, setMatchedQuotes] = useState([]);\n  const [targetHid, setTargetHid] = useState(\"\");\n  const [targetQid, setTargetQid] = useState(\"\");\n  const [isRejecting, setIsRejecting] = useState(false);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  const fetchMatchedQuotes = async () => {\n    // TODO: get hospital Id\n    const quotesData = await fetchUserQuotes({ sub: user.sub! });\n    return quotesData.result.filter(\n      (quote: QuoteDataProps) => quote.status === MATCHED,\n    );\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMatchedQuotes()\n      .then((quotes) => {\n        setMatchedQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Quotes\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const onCancelHandler = (hid: string, qid: string) => {\n    setTargetHid(hid);\n    setTargetQid(qid);\n    setShowModal(true);\n  };\n\n  const rescheduleHandler = (hid: string, qid: string) => {\n    props.history.push(`/mypage/reserve/${hid}/${qid}`);\n  };\n\n  const rejectQuoteHandler = async (hid: string, qid: string) => {\n    setIsRejecting(true);\n    const isSuccess = await rejectQuote({ hid, qid });\n    if (isSuccess) {\n      setIsRejecting(false);\n      setShowModal(false);\n      setIsLoading(true);\n      fetchMatchedQuotes()\n        .then((quotes) => {\n          setMatchedQuotes(quotes);\n          setIsLoading(false);\n        })\n        .catch((e) => {\n          console.error(\"Quotes\", e);\n          setIsLoading(false);\n        });\n    } else {\n      setIsRejecting(false);\n      // TODO: show error modal\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"waiting-container\">\n          {matchedQuotes.length === 0 ? (\n            <FormattedMessage id=\"waiting.youHaveNot\" />\n          ) : (\n            matchedQuotes.map((quote: QuoteDataProps, i) => (\n              <WaitingCard\n                key={i}\n                name={quote.hospitalInfo.name!}\n                hid={quote.hospitalInfo.id!}\n                qid={quote.quoteInfo.id}\n                date={getCstFullDatetimeString(quote.consultTime!)}\n                onCancelHandler={onCancelHandler}\n                videoLink={quote.meetLinks![0]}\n              />\n            ))\n          )}\n          {showModal && (\n            <Modal\n              openController={setShowModal}\n              header=\"Are you sure you want to cancel?\"\n              headerId=\"cancel.msg\"\n              body=\"We might have another schedule that fit yours if you want to reschedule.\"\n              bodyId=\"cancel.text\"\n              closableByClickOutside={true}\n              leftButtonProps={{\n                text: \"Reschedule\",\n                textId: \"button.reschedule\",\n                theme: \"primary\",\n                shape: \"square\",\n                style: { fontSize: \"12px\", fontWeight: \"700\", height: \"40px\" },\n                onClick: () => rescheduleHandler(targetHid, targetQid),\n              }}\n              rightButtonProps={{\n                text: \"Yes, cancel\",\n                textId: \"button.yesCancel\",\n                theme: \"white\",\n                shape: \"square\",\n                style: { fontSize: \"12px\", fontWeight: \"700\", height: \"40px\" },\n                isLoading: isRejecting,\n                onClick: () => rejectQuoteHandler(targetHid, targetQid),\n              }}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Waiting;\n"]},"metadata":{},"sourceType":"module"}