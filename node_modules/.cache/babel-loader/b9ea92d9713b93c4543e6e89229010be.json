{"ast":null,"code":"import _regeneratorRuntime from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/haesol/Desktop/mediround-user-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{FormattedMessage}from\"react-intl\";import{useSelector}from\"react-redux\";import{fetchUserQuotes}from\"../../api/quote\";import DoneCard from\"../../components/Card/DoneCard\";import{getCstFullDatetimeString,MATCHED}from\"../../utils\";import{Loading}from\"../Hospital/Containers/Request\";import\"./Done.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Done=function Done(){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),doneQuotes=_useState4[0],setDoneQuotes=_useState4[1];var user=useSelector(function(state){return state.user.current;});useEffect(function(){setIsLoading(true);var fetchMatchedQuotes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var quotesData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchUserQuotes({sub:user.sub});case 2:quotesData=_context.sent;return _context.abrupt(\"return\",quotesData.result.filter(function(quote){return quote.status===MATCHED;}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchMatchedQuotes(){return _ref.apply(this,arguments);};}();fetchMatchedQuotes().then(function(quotes){// TODO: filter done quotes\nsetDoneQuotes(quotes);setIsLoading(false);}).catch(function(e){console.error(\"Done\",e);setIsLoading(false);});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:isLoading?/*#__PURE__*/_jsx(Loading,{}):/*#__PURE__*/_jsx(\"div\",{className:\"done-container\",children:doneQuotes.length===0?/*#__PURE__*/_jsx(FormattedMessage,{id:\"done.youHaveNot\"}):doneQuotes.map(function(quote,i){return/*#__PURE__*/_jsx(DoneCard,{hid:quote.hospitalInfo.id,qid:quote.quoteInfo.id,name:quote.hospitalInfo.name,date:getCstFullDatetimeString(quote.consultTime)},i);})})});};export default Done;","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web/src/pages/My/Done.tsx"],"names":["React","useEffect","useState","FormattedMessage","useSelector","fetchUserQuotes","DoneCard","getCstFullDatetimeString","MATCHED","Loading","Done","isLoading","setIsLoading","doneQuotes","setDoneQuotes","user","state","current","fetchMatchedQuotes","sub","quotesData","result","filter","quote","status","then","quotes","catch","e","console","error","length","map","i","hospitalInfo","id","quoteInfo","name","consultTime"],"mappings":"0dAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,gBAAT,KAAiC,YAAjC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,eAAT,KAAgC,iBAAhC,CAEA,MAAOC,CAAAA,QAAP,KAAqB,gCAArB,CAEA,OAASC,wBAAT,CAAmCC,OAAnC,KAAkD,aAAlD,CACA,OAASC,OAAT,KAAwC,gCAAxC,CACA,MAAO,aAAP,C,gGAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,eACiBR,QAAQ,CAAC,IAAD,CADzB,wCACVS,SADU,eACCC,YADD,8BAEmBV,QAAQ,CAAC,EAAD,CAF3B,yCAEVW,UAFU,eAEEC,aAFF,eAGjB,GAAMC,CAAAA,IAAe,CAAGX,WAAW,CAAC,SAACY,KAAD,QAAsBA,CAAAA,KAAK,CAACD,IAAN,CAAWE,OAAjC,EAAD,CAAnC,CAEAhB,SAAS,CAAC,UAAM,CACdW,YAAY,CAAC,IAAD,CAAZ,CACA,GAAMM,CAAAA,kBAAkB,0FAAG,wKAEAb,CAAAA,eAAe,CAAC,CAAEc,GAAG,CAAEJ,IAAI,CAACI,GAAZ,CAAD,CAFf,QAEnBC,UAFmB,+CAGlBA,UAAU,CAACC,MAAX,CAAkBC,MAAlB,CACL,SAACC,KAAD,QAA2BA,CAAAA,KAAK,CAACC,MAAN,GAAiBhB,OAA5C,EADK,CAHkB,wDAAH,kBAAlBU,CAAAA,kBAAkB,0CAAxB,CAOAA,kBAAkB,GACfO,IADH,CACQ,SAACC,MAAD,CAAY,CAChB;AACAZ,aAAa,CAACY,MAAD,CAAb,CACAd,YAAY,CAAC,KAAD,CAAZ,CACD,CALH,EAMGe,KANH,CAMS,SAACC,CAAD,CAAO,CACZC,OAAO,CAACC,KAAR,CAAc,MAAd,CAAsBF,CAAtB,EACAhB,YAAY,CAAC,KAAD,CAAZ,CACD,CATH,EAUD,CAnBQ,CAmBN,EAnBM,CAAT,CAqBA,mBACE,yBACGD,SAAS,cACR,KAAC,OAAD,IADQ,cAGR,YAAK,SAAS,CAAC,gBAAf,UACGE,UAAU,CAACkB,MAAX,GAAsB,CAAtB,cACC,KAAC,gBAAD,EAAkB,EAAE,CAAC,iBAArB,EADD,CAGClB,UAAU,CAACmB,GAAX,CAAe,SAACT,KAAD,CAAwBU,CAAxB,qBACb,KAAC,QAAD,EAEE,GAAG,CAAEV,KAAK,CAACW,YAAN,CAAmBC,EAF1B,CAGE,GAAG,CAAEZ,KAAK,CAACa,SAAN,CAAgBD,EAHvB,CAIE,IAAI,CAAEZ,KAAK,CAACW,YAAN,CAAmBG,IAJ3B,CAKE,IAAI,CAAE9B,wBAAwB,CAACgB,KAAK,CAACe,WAAP,CALhC,EACOL,CADP,CADa,EAAf,CAJJ,EAJJ,EADF,CAuBD,CAjDD,CAmDA,cAAevB,CAAAA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport DoneCard from \"../../components/Card/DoneCard\";\nimport { RootState } from \"../../store\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Done.scss\";\n\nconst Done = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [doneQuotes, setDoneQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchMatchedQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === MATCHED,\n      );\n    };\n    fetchMatchedQuotes()\n      .then((quotes) => {\n        // TODO: filter done quotes\n        setDoneQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Done\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"done-container\">\n          {doneQuotes.length === 0 ? (\n            <FormattedMessage id=\"done.youHaveNot\" />\n          ) : (\n            doneQuotes.map((quote: QuoteDataProps, i) => (\n              <DoneCard\n                key={i}\n                hid={quote.hospitalInfo.id!}\n                qid={quote.quoteInfo.id}\n                name={quote.hospitalInfo.name!}\n                date={getCstFullDatetimeString(quote.consultTime!)}\n              />\n            ))\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Done;\n"]},"metadata":{},"sourceType":"module"}