{"ast":null,"code":"import _slicedToArray from\"/Users/haesol/Desktop/mediround-user-web-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Provider,useSelector}from\"react-redux\";import{ConnectedRouter}from\"connected-react-router\";import\"./App.css\";import\"./App.scss\";import Navbar from\"./components/Navbar/Navbar\";import Sidebar from\"./components/Sidebar/Sidebar\";import Routes from\"./routes\";import Auth,{useAuthContext}from\"./auth/auth\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var RoutesAuthWrapper=function RoutesAuthWrapper(){var auth=useAuthContext();var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setIsLoading=_useState2[1];var currentUser=useSelector(function(state){return state.user.current;});var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),user=_useState4[0],setUser=_useState4[1];var getPageType=function getPageType(){var firstLoc=window.location.pathname.split(\"/\")[1];return firstLoc===\"hospital\"?\"hospital\":\"user\";};useEffect(function(){if(isLoading||user==={}){try{auth===null||auth===void 0?void 0:auth.getSession().then(function(currUser){setUser(currUser);});}catch(err){console.error(err);}setIsLoading(false);}},[auth,user,isLoading]);return/*#__PURE__*/_jsx(\"div\",{className:\"app-content\",children:/*#__PURE__*/_jsx(\"header\",{className:\"App-header \".concat(getPageType(),\"-page\"),children:isLoading?/*#__PURE__*/_jsx(\"div\",{children:\"LOADING...\"}):/*#__PURE__*/_jsx(Routes,{isAuthenticated:user&&Object.keys(user).length!==0||currentUser&&Object.keys(currentUser).length!==0})})});};var App=function App(_ref){var store=_ref.store,history=_ref.history;var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isSidebarOpened=_useState6[0],setIsSidebarOpened=_useState6[1];var sidebarCloseCallback=function sidebarCloseCallback(){return setIsSidebarOpened(false);};var sidebarOpenCallback=function sidebarOpenCallback(){return setIsSidebarOpened(true);};return/*#__PURE__*/_jsx(Provider,{store:store,children:/*#__PURE__*/_jsx(\"div\",{className:\"app-container\",children:/*#__PURE__*/_jsx(ConnectedRouter,{history:history,children:/*#__PURE__*/_jsxs(Auth,{children:[/*#__PURE__*/_jsx(Sidebar,{isSidebarOpened:isSidebarOpened,sidebarCloseCallback:sidebarCloseCallback}),/*#__PURE__*/_jsx(Navbar,{onBurgerIconClickHandler:sidebarOpenCallback}),/*#__PURE__*/_jsx(RoutesAuthWrapper,{})]})})})});};export default App;","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/App.tsx"],"names":["React","useEffect","useState","Provider","useSelector","ConnectedRouter","Navbar","Sidebar","Routes","Auth","useAuthContext","RoutesAuthWrapper","auth","isLoading","setIsLoading","currentUser","state","user","current","setUser","getPageType","firstLoc","window","location","pathname","split","getSession","then","currUser","err","console","error","Object","keys","length","App","store","history","isSidebarOpened","setIsSidebarOpened","sidebarCloseCallback","sidebarOpenCallback"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Provider, useSelector } from \"react-redux\";\nimport { Store } from \"redux\";\nimport { History } from \"history\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport \"./App.css\";\nimport \"./App.scss\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Routes from \"./routes\";\nimport Auth, { useAuthContext } from \"./auth/auth\";\nimport { RootState } from \"./store\";\n\ninterface AppProps {\n  store: Store;\n  history: History;\n}\n\nconst RoutesAuthWrapper = () => {\n  const auth = useAuthContext();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const currentUser = useSelector((state: RootState) => state.user.current);\n  const [user, setUser] = useState({});\n\n  const getPageType = () => {\n    const firstLoc = window.location.pathname.split(\"/\")[1];\n    return firstLoc === \"hospital\" ? \"hospital\" : \"user\";\n  };\n\n  useEffect(() => {\n    if (isLoading || user === {}) {\n      try {\n        auth?.getSession().then((currUser: any) => {\n          setUser(currUser);\n        });\n      } catch (err) {\n        console.error(err);\n      }\n      setIsLoading(false);\n    }\n  }, [auth, user, isLoading]);\n\n  return (\n    <div className=\"app-content\">\n      <header className={`App-header ${getPageType()}-page`}>\n        {isLoading ? (\n          <div>LOADING...</div>\n        ) : (\n          <Routes\n            isAuthenticated={\n              (user && Object.keys(user).length !== 0) ||\n              (currentUser && Object.keys(currentUser).length !== 0)\n            }\n          />\n        )}\n      </header>\n    </div>\n  );\n};\n\nconst App: React.FC<AppProps> = ({ store, history }) => {\n  const [isSidebarOpened, setIsSidebarOpened] = useState(false);\n\n  const sidebarCloseCallback = () => setIsSidebarOpened(false);\n\n  const sidebarOpenCallback = () => setIsSidebarOpened(true);\n\n  return (\n    <Provider store={store}>\n      <div className=\"app-container\">\n        <ConnectedRouter history={history}>\n          <Auth>\n            <Sidebar\n              isSidebarOpened={isSidebarOpened}\n              sidebarCloseCallback={sidebarCloseCallback}\n            />\n            <Navbar onBurgerIconClickHandler={sidebarOpenCallback} />\n            <RoutesAuthWrapper />\n          </Auth>\n        </ConnectedRouter>\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}