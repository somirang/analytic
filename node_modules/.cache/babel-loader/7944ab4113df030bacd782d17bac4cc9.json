{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Sent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport SentQuoteCard from \"../../../components/Card/Hospital/SentQuoteCard\";\nimport { RESPONDED } from \"../../../utils\";\nimport \"./CardListView.scss\";\nimport { EmptyDesc, Loading } from \"./Request\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Legend = props => {\n  const itemList = [\"Patient name\", \"Interested procedures\", \"Recommendation\", props.mode === \"sent\" ? \"Status\" : \"Time\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"legend-container\",\n    children: itemList.map((item, ind) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"legend-item\",\n      children: item\n    }, ind, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = Legend;\n\nconst Sent = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [sentQuotes, setSentQuotes] = useState([]);\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({\n        hid: \"h1\"\n      });\n      return quotesData.result.filter(quote => quote.status === RESPONDED);\n    };\n\n    fetchRequestQuotes().then(quotes => {\n      setSentQuotes(quotes);\n      setIsLoading(false);\n    }).catch(e => {\n      console.error(\"Sent\", e);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hospital-card-list-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hospital-card-list\",\n        children: [/*#__PURE__*/_jsxDEV(Legend, {\n          mode: \"sent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), sentQuotes.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyDesc, {\n          message: \"You haven\\u2019t sent any quotes yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this) : sentQuotes.map((quote, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hospital-card-list-item\",\n          children: /*#__PURE__*/_jsxDEV(SentQuoteCard, {\n            patientName: quote.userInfo.name,\n            isRead: quote.isRead,\n            timestamp: quote.responseTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 19\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Sent, \"BP9FJMuteDEoaTzlp2BSvXW5Vhw=\");\n\n_c2 = Sent;\nexport default Sent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Legend\");\n$RefreshReg$(_c2, \"Sent\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/Hospital/Containers/Sent.tsx"],"names":["React","useEffect","useState","fetchHospitalQuotes","SentQuoteCard","RESPONDED","EmptyDesc","Loading","Legend","props","itemList","mode","map","item","ind","Sent","isLoading","setIsLoading","sentQuotes","setSentQuotes","fetchRequestQuotes","quotesData","hid","result","filter","quote","status","then","quotes","catch","e","console","error","length","i","userInfo","name","isRead","responseTime"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchHospitalQuotes } from \"../../../api/quote\";\nimport SentQuoteCard from \"../../../components/Card/Hospital/SentQuoteCard\";\nimport { RESPONDED } from \"../../../utils\";\nimport \"./CardListView.scss\";\nimport { EmptyDesc, Loading, QuoteDataProps } from \"./Request\";\n\ninterface LegendProps {\n  mode: string;\n}\n\nexport const Legend = (props: LegendProps) => {\n  const itemList = [\n    \"Patient name\",\n    \"Interested procedures\",\n    \"Recommendation\",\n    props.mode === \"sent\" ? \"Status\" : \"Time\",\n  ];\n  return (\n    <div className=\"legend-container\">\n      {itemList.map((item, ind) => (\n        <div className=\"legend-item\" key={ind}>\n          {item}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst Sent = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [sentQuotes, setSentQuotes] = useState([]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchRequestQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchHospitalQuotes({ hid: \"h1\" });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === RESPONDED,\n      );\n    };\n    fetchRequestQuotes()\n      .then((quotes) => {\n        setSentQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Sent\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"hospital-card-list-container\">\n          <div className=\"hospital-card-list\">\n            <Legend mode=\"sent\" />\n            {sentQuotes.length === 0 ? (\n              <EmptyDesc message=\"You havenâ€™t sent any quotes yet.\" />\n            ) : (\n              sentQuotes.map((quote: QuoteDataProps, i) => (\n                <div className=\"hospital-card-list-item\" key={i}>\n                  <SentQuoteCard\n                    patientName={quote.userInfo.name}\n                    isRead={quote.isRead}\n                    timestamp={quote.responseTime}\n                  />\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Sent;\n"]},"metadata":{},"sourceType":"module"}