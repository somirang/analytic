{"ast":null,"code":"var _jsxFileName = \"/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Done.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport DoneCard from \"../../components/Card/DoneCard\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading } from \"../Hospital/Containers/Request\";\nimport \"./Done.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Done = () => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [doneQuotes, setDoneQuotes] = useState([]);\n  const user = useSelector(state => state.user.current);\n  useEffect(() => {\n    setIsLoading(true);\n\n    const fetchMatchedQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({\n        sub: user.sub\n      });\n      return quotesData.result.filter(quote => quote.status === MATCHED);\n    };\n\n    fetchMatchedQuotes().then(quotes => {\n      // TODO: filter done quotes\n      setDoneQuotes(quotes);\n      setIsLoading(false);\n    }).catch(e => {\n      console.error(\"Done\", e);\n      setIsLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"done-container\",\n      children: doneQuotes.length === 0 ? /*#__PURE__*/_jsxDEV(FormattedMessage, {\n        id: \"done.youHaveNot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }, this) : doneQuotes.map((quote, i) => /*#__PURE__*/_jsxDEV(DoneCard, {\n        hid: quote.hospitalInfo.id,\n        qid: quote.quoteInfo.id,\n        name: quote.hospitalInfo.name,\n        date: getCstFullDatetimeString(quote.consultTime)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Done, \"NBHs/mEWRu06MWbVMP1K/GQvKLI=\", false, function () {\n  return [useSelector];\n});\n\n_c = Done;\nexport default Done;\n\nvar _c;\n\n$RefreshReg$(_c, \"Done\");","map":{"version":3,"sources":["/Users/haesol/Desktop/mediround-user-web-master/src/pages/My/Done.tsx"],"names":["React","useEffect","useState","FormattedMessage","useSelector","fetchUserQuotes","DoneCard","getCstFullDatetimeString","MATCHED","Loading","Done","isLoading","setIsLoading","doneQuotes","setDoneQuotes","user","state","current","fetchMatchedQuotes","quotesData","sub","result","filter","quote","status","then","quotes","catch","e","console","error","length","map","i","hospitalInfo","id","quoteInfo","name","consultTime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,gBAAT,QAAiC,YAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,SAASC,wBAAT,EAAmCC,OAAnC,QAAkD,aAAlD;AACA,SAASC,OAAT,QAAwC,gCAAxC;AACA,OAAO,aAAP;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMa,IAAe,GAAGX,WAAW,CAAEY,KAAD,IAAsBA,KAAK,CAACD,IAAN,CAAWE,OAAlC,CAAnC;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,UAAMM,kBAAkB,GAAG,YAAY;AACrC;AACA,YAAMC,UAAU,GAAG,MAAMd,eAAe,CAAC;AAAEe,QAAAA,GAAG,EAAEL,IAAI,CAACK;AAAZ,OAAD,CAAxC;AACA,aAAOD,UAAU,CAACE,MAAX,CAAkBC,MAAlB,CACJC,KAAD,IAA2BA,KAAK,CAACC,MAAN,KAAiBhB,OADvC,CAAP;AAGD,KAND;;AAOAU,IAAAA,kBAAkB,GACfO,IADH,CACSC,MAAD,IAAY;AAChB;AACAZ,MAAAA,aAAa,CAACY,MAAD,CAAb;AACAd,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALH,EAMGe,KANH,CAMUC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAc,MAAd,EAAsBF,CAAtB;AACAhB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KATH;AAUD,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBACE;AAAA,cACGD,SAAS,gBACR,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADQ,gBAGR;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACGE,UAAU,CAACkB,MAAX,KAAsB,CAAtB,gBACC,QAAC,gBAAD;AAAkB,QAAA,EAAE,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,cADD,GAGClB,UAAU,CAACmB,GAAX,CAAe,CAACT,KAAD,EAAwBU,CAAxB,kBACb,QAAC,QAAD;AAEE,QAAA,GAAG,EAAEV,KAAK,CAACW,YAAN,CAAmBC,EAF1B;AAGE,QAAA,GAAG,EAAEZ,KAAK,CAACa,SAAN,CAAgBD,EAHvB;AAIE,QAAA,IAAI,EAAEZ,KAAK,CAACW,YAAN,CAAmBG,IAJ3B;AAKE,QAAA,IAAI,EAAE9B,wBAAwB,CAACgB,KAAK,CAACe,WAAP;AALhC,SACOL,CADP;AAAA;AAAA;AAAA;AAAA,cADF;AAJJ;AAAA;AAAA;AAAA;AAAA;AAJJ,mBADF;AAuBD,CAjDD;;GAAMvB,I;UAGoBN,W;;;KAHpBM,I;AAmDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useSelector } from \"react-redux\";\nimport { fetchUserQuotes } from \"../../api/quote\";\nimport { UserProps } from \"../../auth/auth\";\nimport DoneCard from \"../../components/Card/DoneCard\";\nimport { RootState } from \"../../store\";\nimport { getCstFullDatetimeString, MATCHED } from \"../../utils\";\nimport { Loading, QuoteDataProps } from \"../Hospital/Containers/Request\";\nimport \"./Done.scss\";\n\nconst Done = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [doneQuotes, setDoneQuotes] = useState([]);\n  const user: UserProps = useSelector((state: RootState) => state.user.current);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const fetchMatchedQuotes = async () => {\n      // TODO: get hospital Id\n      const quotesData = await fetchUserQuotes({ sub: user.sub! });\n      return quotesData.result.filter(\n        (quote: QuoteDataProps) => quote.status === MATCHED,\n      );\n    };\n    fetchMatchedQuotes()\n      .then((quotes) => {\n        // TODO: filter done quotes\n        setDoneQuotes(quotes);\n        setIsLoading(false);\n      })\n      .catch((e) => {\n        console.error(\"Done\", e);\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <div className=\"done-container\">\n          {doneQuotes.length === 0 ? (\n            <FormattedMessage id=\"done.youHaveNot\" />\n          ) : (\n            doneQuotes.map((quote: QuoteDataProps, i) => (\n              <DoneCard\n                key={i}\n                hid={quote.hospitalInfo.id!}\n                qid={quote.quoteInfo.id}\n                name={quote.hospitalInfo.name!}\n                date={getCstFullDatetimeString(quote.consultTime!)}\n              />\n            ))\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Done;\n"]},"metadata":{},"sourceType":"module"}